/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-04-28")
public class Storage {

  public interface Iface {

    public Callback getBookList() throws org.apache.thrift.TException;

    public Callback getBookChapters(java.lang.String bookUid) throws org.apache.thrift.TException;

    public void renameBook(CustomPair newValue) throws org.apache.thrift.TException;

    public void renameBookChapter(java.lang.String bookUid, CustomPair newValue) throws org.apache.thrift.TException;

    public Callback getChapter(java.lang.String bookUid, java.lang.String chapterUid) throws org.apache.thrift.TException;

    public void updateChapter(java.lang.String bookUid, java.lang.String chapterUid, Chapter chapter) throws org.apache.thrift.TException;

    public void removeBook(java.lang.String bookUid) throws org.apache.thrift.TException;

    public void removeChapter(java.lang.String bookUid, java.lang.String chapterUid) throws org.apache.thrift.TException;

    public void addBook(java.lang.String bookName) throws org.apache.thrift.TException;

    public void addChapter(java.lang.String bookUid, java.lang.String chapterName) throws org.apache.thrift.TException;

    public java.util.List<Callback> subscribeForBookList() throws org.apache.thrift.TException;

    public java.util.List<Callback> subscribeForBookChapters(java.lang.String bookUid) throws org.apache.thrift.TException;

    public java.util.List<Callback> subscribeForChapter(java.lang.String bookUid, java.lang.String chapterUid) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getBookList(org.apache.thrift.async.AsyncMethodCallback<Callback> resultHandler) throws org.apache.thrift.TException;

    public void getBookChapters(java.lang.String bookUid, org.apache.thrift.async.AsyncMethodCallback<Callback> resultHandler) throws org.apache.thrift.TException;

    public void renameBook(CustomPair newValue, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void renameBookChapter(java.lang.String bookUid, CustomPair newValue, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void getChapter(java.lang.String bookUid, java.lang.String chapterUid, org.apache.thrift.async.AsyncMethodCallback<Callback> resultHandler) throws org.apache.thrift.TException;

    public void updateChapter(java.lang.String bookUid, java.lang.String chapterUid, Chapter chapter, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void removeBook(java.lang.String bookUid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void removeChapter(java.lang.String bookUid, java.lang.String chapterUid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void addBook(java.lang.String bookName, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void addChapter(java.lang.String bookUid, java.lang.String chapterName, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void subscribeForBookList(org.apache.thrift.async.AsyncMethodCallback<java.util.List<Callback>> resultHandler) throws org.apache.thrift.TException;

    public void subscribeForBookChapters(java.lang.String bookUid, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Callback>> resultHandler) throws org.apache.thrift.TException;

    public void subscribeForChapter(java.lang.String bookUid, java.lang.String chapterUid, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Callback>> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Callback getBookList() throws org.apache.thrift.TException
    {
      send_getBookList();
      return recv_getBookList();
    }

    public void send_getBookList() throws org.apache.thrift.TException
    {
      getBookList_args args = new getBookList_args();
      sendBase("getBookList", args);
    }

    public Callback recv_getBookList() throws org.apache.thrift.TException
    {
      getBookList_result result = new getBookList_result();
      receiveBase(result, "getBookList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBookList failed: unknown result");
    }

    public Callback getBookChapters(java.lang.String bookUid) throws org.apache.thrift.TException
    {
      send_getBookChapters(bookUid);
      return recv_getBookChapters();
    }

    public void send_getBookChapters(java.lang.String bookUid) throws org.apache.thrift.TException
    {
      getBookChapters_args args = new getBookChapters_args();
      args.setBookUid(bookUid);
      sendBase("getBookChapters", args);
    }

    public Callback recv_getBookChapters() throws org.apache.thrift.TException
    {
      getBookChapters_result result = new getBookChapters_result();
      receiveBase(result, "getBookChapters");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBookChapters failed: unknown result");
    }

    public void renameBook(CustomPair newValue) throws org.apache.thrift.TException
    {
      send_renameBook(newValue);
      recv_renameBook();
    }

    public void send_renameBook(CustomPair newValue) throws org.apache.thrift.TException
    {
      renameBook_args args = new renameBook_args();
      args.setNewValue(newValue);
      sendBase("renameBook", args);
    }

    public void recv_renameBook() throws org.apache.thrift.TException
    {
      renameBook_result result = new renameBook_result();
      receiveBase(result, "renameBook");
      return;
    }

    public void renameBookChapter(java.lang.String bookUid, CustomPair newValue) throws org.apache.thrift.TException
    {
      send_renameBookChapter(bookUid, newValue);
      recv_renameBookChapter();
    }

    public void send_renameBookChapter(java.lang.String bookUid, CustomPair newValue) throws org.apache.thrift.TException
    {
      renameBookChapter_args args = new renameBookChapter_args();
      args.setBookUid(bookUid);
      args.setNewValue(newValue);
      sendBase("renameBookChapter", args);
    }

    public void recv_renameBookChapter() throws org.apache.thrift.TException
    {
      renameBookChapter_result result = new renameBookChapter_result();
      receiveBase(result, "renameBookChapter");
      return;
    }

    public Callback getChapter(java.lang.String bookUid, java.lang.String chapterUid) throws org.apache.thrift.TException
    {
      send_getChapter(bookUid, chapterUid);
      return recv_getChapter();
    }

    public void send_getChapter(java.lang.String bookUid, java.lang.String chapterUid) throws org.apache.thrift.TException
    {
      getChapter_args args = new getChapter_args();
      args.setBookUid(bookUid);
      args.setChapterUid(chapterUid);
      sendBase("getChapter", args);
    }

    public Callback recv_getChapter() throws org.apache.thrift.TException
    {
      getChapter_result result = new getChapter_result();
      receiveBase(result, "getChapter");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getChapter failed: unknown result");
    }

    public void updateChapter(java.lang.String bookUid, java.lang.String chapterUid, Chapter chapter) throws org.apache.thrift.TException
    {
      send_updateChapter(bookUid, chapterUid, chapter);
      recv_updateChapter();
    }

    public void send_updateChapter(java.lang.String bookUid, java.lang.String chapterUid, Chapter chapter) throws org.apache.thrift.TException
    {
      updateChapter_args args = new updateChapter_args();
      args.setBookUid(bookUid);
      args.setChapterUid(chapterUid);
      args.setChapter(chapter);
      sendBase("updateChapter", args);
    }

    public void recv_updateChapter() throws org.apache.thrift.TException
    {
      updateChapter_result result = new updateChapter_result();
      receiveBase(result, "updateChapter");
      return;
    }

    public void removeBook(java.lang.String bookUid) throws org.apache.thrift.TException
    {
      send_removeBook(bookUid);
      recv_removeBook();
    }

    public void send_removeBook(java.lang.String bookUid) throws org.apache.thrift.TException
    {
      removeBook_args args = new removeBook_args();
      args.setBookUid(bookUid);
      sendBase("removeBook", args);
    }

    public void recv_removeBook() throws org.apache.thrift.TException
    {
      removeBook_result result = new removeBook_result();
      receiveBase(result, "removeBook");
      return;
    }

    public void removeChapter(java.lang.String bookUid, java.lang.String chapterUid) throws org.apache.thrift.TException
    {
      send_removeChapter(bookUid, chapterUid);
      recv_removeChapter();
    }

    public void send_removeChapter(java.lang.String bookUid, java.lang.String chapterUid) throws org.apache.thrift.TException
    {
      removeChapter_args args = new removeChapter_args();
      args.setBookUid(bookUid);
      args.setChapterUid(chapterUid);
      sendBase("removeChapter", args);
    }

    public void recv_removeChapter() throws org.apache.thrift.TException
    {
      removeChapter_result result = new removeChapter_result();
      receiveBase(result, "removeChapter");
      return;
    }

    public void addBook(java.lang.String bookName) throws org.apache.thrift.TException
    {
      send_addBook(bookName);
      recv_addBook();
    }

    public void send_addBook(java.lang.String bookName) throws org.apache.thrift.TException
    {
      addBook_args args = new addBook_args();
      args.setBookName(bookName);
      sendBase("addBook", args);
    }

    public void recv_addBook() throws org.apache.thrift.TException
    {
      addBook_result result = new addBook_result();
      receiveBase(result, "addBook");
      return;
    }

    public void addChapter(java.lang.String bookUid, java.lang.String chapterName) throws org.apache.thrift.TException
    {
      send_addChapter(bookUid, chapterName);
      recv_addChapter();
    }

    public void send_addChapter(java.lang.String bookUid, java.lang.String chapterName) throws org.apache.thrift.TException
    {
      addChapter_args args = new addChapter_args();
      args.setBookUid(bookUid);
      args.setChapterName(chapterName);
      sendBase("addChapter", args);
    }

    public void recv_addChapter() throws org.apache.thrift.TException
    {
      addChapter_result result = new addChapter_result();
      receiveBase(result, "addChapter");
      return;
    }

    public java.util.List<Callback> subscribeForBookList() throws org.apache.thrift.TException
    {
      send_subscribeForBookList();
      return recv_subscribeForBookList();
    }

    public void send_subscribeForBookList() throws org.apache.thrift.TException
    {
      subscribeForBookList_args args = new subscribeForBookList_args();
      sendBase("subscribeForBookList", args);
    }

    public java.util.List<Callback> recv_subscribeForBookList() throws org.apache.thrift.TException
    {
      subscribeForBookList_result result = new subscribeForBookList_result();
      receiveBase(result, "subscribeForBookList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "subscribeForBookList failed: unknown result");
    }

    public java.util.List<Callback> subscribeForBookChapters(java.lang.String bookUid) throws org.apache.thrift.TException
    {
      send_subscribeForBookChapters(bookUid);
      return recv_subscribeForBookChapters();
    }

    public void send_subscribeForBookChapters(java.lang.String bookUid) throws org.apache.thrift.TException
    {
      subscribeForBookChapters_args args = new subscribeForBookChapters_args();
      args.setBookUid(bookUid);
      sendBase("subscribeForBookChapters", args);
    }

    public java.util.List<Callback> recv_subscribeForBookChapters() throws org.apache.thrift.TException
    {
      subscribeForBookChapters_result result = new subscribeForBookChapters_result();
      receiveBase(result, "subscribeForBookChapters");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "subscribeForBookChapters failed: unknown result");
    }

    public java.util.List<Callback> subscribeForChapter(java.lang.String bookUid, java.lang.String chapterUid) throws org.apache.thrift.TException
    {
      send_subscribeForChapter(bookUid, chapterUid);
      return recv_subscribeForChapter();
    }

    public void send_subscribeForChapter(java.lang.String bookUid, java.lang.String chapterUid) throws org.apache.thrift.TException
    {
      subscribeForChapter_args args = new subscribeForChapter_args();
      args.setBookUid(bookUid);
      args.setChapterUid(chapterUid);
      sendBase("subscribeForChapter", args);
    }

    public java.util.List<Callback> recv_subscribeForChapter() throws org.apache.thrift.TException
    {
      subscribeForChapter_result result = new subscribeForChapter_result();
      receiveBase(result, "subscribeForChapter");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "subscribeForChapter failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getBookList(org.apache.thrift.async.AsyncMethodCallback<Callback> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBookList_call method_call = new getBookList_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBookList_call extends org.apache.thrift.async.TAsyncMethodCall<Callback> {
      public getBookList_call(org.apache.thrift.async.AsyncMethodCallback<Callback> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBookList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBookList_args args = new getBookList_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Callback getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBookList();
      }
    }

    public void getBookChapters(java.lang.String bookUid, org.apache.thrift.async.AsyncMethodCallback<Callback> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBookChapters_call method_call = new getBookChapters_call(bookUid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBookChapters_call extends org.apache.thrift.async.TAsyncMethodCall<Callback> {
      private java.lang.String bookUid;
      public getBookChapters_call(java.lang.String bookUid, org.apache.thrift.async.AsyncMethodCallback<Callback> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bookUid = bookUid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBookChapters", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBookChapters_args args = new getBookChapters_args();
        args.setBookUid(bookUid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Callback getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBookChapters();
      }
    }

    public void renameBook(CustomPair newValue, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      renameBook_call method_call = new renameBook_call(newValue, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class renameBook_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private CustomPair newValue;
      public renameBook_call(CustomPair newValue, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.newValue = newValue;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("renameBook", org.apache.thrift.protocol.TMessageType.CALL, 0));
        renameBook_args args = new renameBook_args();
        args.setNewValue(newValue);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void renameBookChapter(java.lang.String bookUid, CustomPair newValue, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      renameBookChapter_call method_call = new renameBookChapter_call(bookUid, newValue, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class renameBookChapter_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String bookUid;
      private CustomPair newValue;
      public renameBookChapter_call(java.lang.String bookUid, CustomPair newValue, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bookUid = bookUid;
        this.newValue = newValue;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("renameBookChapter", org.apache.thrift.protocol.TMessageType.CALL, 0));
        renameBookChapter_args args = new renameBookChapter_args();
        args.setBookUid(bookUid);
        args.setNewValue(newValue);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void getChapter(java.lang.String bookUid, java.lang.String chapterUid, org.apache.thrift.async.AsyncMethodCallback<Callback> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getChapter_call method_call = new getChapter_call(bookUid, chapterUid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getChapter_call extends org.apache.thrift.async.TAsyncMethodCall<Callback> {
      private java.lang.String bookUid;
      private java.lang.String chapterUid;
      public getChapter_call(java.lang.String bookUid, java.lang.String chapterUid, org.apache.thrift.async.AsyncMethodCallback<Callback> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bookUid = bookUid;
        this.chapterUid = chapterUid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getChapter", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getChapter_args args = new getChapter_args();
        args.setBookUid(bookUid);
        args.setChapterUid(chapterUid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Callback getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getChapter();
      }
    }

    public void updateChapter(java.lang.String bookUid, java.lang.String chapterUid, Chapter chapter, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateChapter_call method_call = new updateChapter_call(bookUid, chapterUid, chapter, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateChapter_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String bookUid;
      private java.lang.String chapterUid;
      private Chapter chapter;
      public updateChapter_call(java.lang.String bookUid, java.lang.String chapterUid, Chapter chapter, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bookUid = bookUid;
        this.chapterUid = chapterUid;
        this.chapter = chapter;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateChapter", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateChapter_args args = new updateChapter_args();
        args.setBookUid(bookUid);
        args.setChapterUid(chapterUid);
        args.setChapter(chapter);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void removeBook(java.lang.String bookUid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeBook_call method_call = new removeBook_call(bookUid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeBook_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String bookUid;
      public removeBook_call(java.lang.String bookUid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bookUid = bookUid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeBook", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeBook_args args = new removeBook_args();
        args.setBookUid(bookUid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void removeChapter(java.lang.String bookUid, java.lang.String chapterUid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeChapter_call method_call = new removeChapter_call(bookUid, chapterUid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeChapter_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String bookUid;
      private java.lang.String chapterUid;
      public removeChapter_call(java.lang.String bookUid, java.lang.String chapterUid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bookUid = bookUid;
        this.chapterUid = chapterUid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeChapter", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeChapter_args args = new removeChapter_args();
        args.setBookUid(bookUid);
        args.setChapterUid(chapterUid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void addBook(java.lang.String bookName, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addBook_call method_call = new addBook_call(bookName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addBook_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String bookName;
      public addBook_call(java.lang.String bookName, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bookName = bookName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addBook", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addBook_args args = new addBook_args();
        args.setBookName(bookName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void addChapter(java.lang.String bookUid, java.lang.String chapterName, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addChapter_call method_call = new addChapter_call(bookUid, chapterName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addChapter_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String bookUid;
      private java.lang.String chapterName;
      public addChapter_call(java.lang.String bookUid, java.lang.String chapterName, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bookUid = bookUid;
        this.chapterName = chapterName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addChapter", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addChapter_args args = new addChapter_args();
        args.setBookUid(bookUid);
        args.setChapterName(chapterName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void subscribeForBookList(org.apache.thrift.async.AsyncMethodCallback<java.util.List<Callback>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      subscribeForBookList_call method_call = new subscribeForBookList_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class subscribeForBookList_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Callback>> {
      public subscribeForBookList_call(org.apache.thrift.async.AsyncMethodCallback<java.util.List<Callback>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("subscribeForBookList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        subscribeForBookList_args args = new subscribeForBookList_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Callback> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_subscribeForBookList();
      }
    }

    public void subscribeForBookChapters(java.lang.String bookUid, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Callback>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      subscribeForBookChapters_call method_call = new subscribeForBookChapters_call(bookUid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class subscribeForBookChapters_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Callback>> {
      private java.lang.String bookUid;
      public subscribeForBookChapters_call(java.lang.String bookUid, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Callback>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bookUid = bookUid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("subscribeForBookChapters", org.apache.thrift.protocol.TMessageType.CALL, 0));
        subscribeForBookChapters_args args = new subscribeForBookChapters_args();
        args.setBookUid(bookUid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Callback> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_subscribeForBookChapters();
      }
    }

    public void subscribeForChapter(java.lang.String bookUid, java.lang.String chapterUid, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Callback>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      subscribeForChapter_call method_call = new subscribeForChapter_call(bookUid, chapterUid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class subscribeForChapter_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Callback>> {
      private java.lang.String bookUid;
      private java.lang.String chapterUid;
      public subscribeForChapter_call(java.lang.String bookUid, java.lang.String chapterUid, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Callback>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bookUid = bookUid;
        this.chapterUid = chapterUid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("subscribeForChapter", org.apache.thrift.protocol.TMessageType.CALL, 0));
        subscribeForChapter_args args = new subscribeForChapter_args();
        args.setBookUid(bookUid);
        args.setChapterUid(chapterUid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Callback> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_subscribeForChapter();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getBookList", new getBookList());
      processMap.put("getBookChapters", new getBookChapters());
      processMap.put("renameBook", new renameBook());
      processMap.put("renameBookChapter", new renameBookChapter());
      processMap.put("getChapter", new getChapter());
      processMap.put("updateChapter", new updateChapter());
      processMap.put("removeBook", new removeBook());
      processMap.put("removeChapter", new removeChapter());
      processMap.put("addBook", new addBook());
      processMap.put("addChapter", new addChapter());
      processMap.put("subscribeForBookList", new subscribeForBookList());
      processMap.put("subscribeForBookChapters", new subscribeForBookChapters());
      processMap.put("subscribeForChapter", new subscribeForChapter());
      return processMap;
    }

    public static class getBookList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBookList_args> {
      public getBookList() {
        super("getBookList");
      }

      public getBookList_args getEmptyArgsInstance() {
        return new getBookList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBookList_result getResult(I iface, getBookList_args args) throws org.apache.thrift.TException {
        getBookList_result result = new getBookList_result();
        result.success = iface.getBookList();
        return result;
      }
    }

    public static class getBookChapters<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBookChapters_args> {
      public getBookChapters() {
        super("getBookChapters");
      }

      public getBookChapters_args getEmptyArgsInstance() {
        return new getBookChapters_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBookChapters_result getResult(I iface, getBookChapters_args args) throws org.apache.thrift.TException {
        getBookChapters_result result = new getBookChapters_result();
        result.success = iface.getBookChapters(args.bookUid);
        return result;
      }
    }

    public static class renameBook<I extends Iface> extends org.apache.thrift.ProcessFunction<I, renameBook_args> {
      public renameBook() {
        super("renameBook");
      }

      public renameBook_args getEmptyArgsInstance() {
        return new renameBook_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public renameBook_result getResult(I iface, renameBook_args args) throws org.apache.thrift.TException {
        renameBook_result result = new renameBook_result();
        iface.renameBook(args.newValue);
        return result;
      }
    }

    public static class renameBookChapter<I extends Iface> extends org.apache.thrift.ProcessFunction<I, renameBookChapter_args> {
      public renameBookChapter() {
        super("renameBookChapter");
      }

      public renameBookChapter_args getEmptyArgsInstance() {
        return new renameBookChapter_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public renameBookChapter_result getResult(I iface, renameBookChapter_args args) throws org.apache.thrift.TException {
        renameBookChapter_result result = new renameBookChapter_result();
        iface.renameBookChapter(args.bookUid, args.newValue);
        return result;
      }
    }

    public static class getChapter<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getChapter_args> {
      public getChapter() {
        super("getChapter");
      }

      public getChapter_args getEmptyArgsInstance() {
        return new getChapter_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getChapter_result getResult(I iface, getChapter_args args) throws org.apache.thrift.TException {
        getChapter_result result = new getChapter_result();
        result.success = iface.getChapter(args.bookUid, args.chapterUid);
        return result;
      }
    }

    public static class updateChapter<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateChapter_args> {
      public updateChapter() {
        super("updateChapter");
      }

      public updateChapter_args getEmptyArgsInstance() {
        return new updateChapter_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateChapter_result getResult(I iface, updateChapter_args args) throws org.apache.thrift.TException {
        updateChapter_result result = new updateChapter_result();
        iface.updateChapter(args.bookUid, args.chapterUid, args.chapter);
        return result;
      }
    }

    public static class removeBook<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeBook_args> {
      public removeBook() {
        super("removeBook");
      }

      public removeBook_args getEmptyArgsInstance() {
        return new removeBook_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeBook_result getResult(I iface, removeBook_args args) throws org.apache.thrift.TException {
        removeBook_result result = new removeBook_result();
        iface.removeBook(args.bookUid);
        return result;
      }
    }

    public static class removeChapter<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeChapter_args> {
      public removeChapter() {
        super("removeChapter");
      }

      public removeChapter_args getEmptyArgsInstance() {
        return new removeChapter_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeChapter_result getResult(I iface, removeChapter_args args) throws org.apache.thrift.TException {
        removeChapter_result result = new removeChapter_result();
        iface.removeChapter(args.bookUid, args.chapterUid);
        return result;
      }
    }

    public static class addBook<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addBook_args> {
      public addBook() {
        super("addBook");
      }

      public addBook_args getEmptyArgsInstance() {
        return new addBook_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addBook_result getResult(I iface, addBook_args args) throws org.apache.thrift.TException {
        addBook_result result = new addBook_result();
        iface.addBook(args.bookName);
        return result;
      }
    }

    public static class addChapter<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addChapter_args> {
      public addChapter() {
        super("addChapter");
      }

      public addChapter_args getEmptyArgsInstance() {
        return new addChapter_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addChapter_result getResult(I iface, addChapter_args args) throws org.apache.thrift.TException {
        addChapter_result result = new addChapter_result();
        iface.addChapter(args.bookUid, args.chapterName);
        return result;
      }
    }

    public static class subscribeForBookList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, subscribeForBookList_args> {
      public subscribeForBookList() {
        super("subscribeForBookList");
      }

      public subscribeForBookList_args getEmptyArgsInstance() {
        return new subscribeForBookList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public subscribeForBookList_result getResult(I iface, subscribeForBookList_args args) throws org.apache.thrift.TException {
        subscribeForBookList_result result = new subscribeForBookList_result();
        result.success = iface.subscribeForBookList();
        return result;
      }
    }

    public static class subscribeForBookChapters<I extends Iface> extends org.apache.thrift.ProcessFunction<I, subscribeForBookChapters_args> {
      public subscribeForBookChapters() {
        super("subscribeForBookChapters");
      }

      public subscribeForBookChapters_args getEmptyArgsInstance() {
        return new subscribeForBookChapters_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public subscribeForBookChapters_result getResult(I iface, subscribeForBookChapters_args args) throws org.apache.thrift.TException {
        subscribeForBookChapters_result result = new subscribeForBookChapters_result();
        result.success = iface.subscribeForBookChapters(args.bookUid);
        return result;
      }
    }

    public static class subscribeForChapter<I extends Iface> extends org.apache.thrift.ProcessFunction<I, subscribeForChapter_args> {
      public subscribeForChapter() {
        super("subscribeForChapter");
      }

      public subscribeForChapter_args getEmptyArgsInstance() {
        return new subscribeForChapter_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public subscribeForChapter_result getResult(I iface, subscribeForChapter_args args) throws org.apache.thrift.TException {
        subscribeForChapter_result result = new subscribeForChapter_result();
        result.success = iface.subscribeForChapter(args.bookUid, args.chapterUid);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getBookList", new getBookList());
      processMap.put("getBookChapters", new getBookChapters());
      processMap.put("renameBook", new renameBook());
      processMap.put("renameBookChapter", new renameBookChapter());
      processMap.put("getChapter", new getChapter());
      processMap.put("updateChapter", new updateChapter());
      processMap.put("removeBook", new removeBook());
      processMap.put("removeChapter", new removeChapter());
      processMap.put("addBook", new addBook());
      processMap.put("addChapter", new addChapter());
      processMap.put("subscribeForBookList", new subscribeForBookList());
      processMap.put("subscribeForBookChapters", new subscribeForBookChapters());
      processMap.put("subscribeForChapter", new subscribeForChapter());
      return processMap;
    }

    public static class getBookList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBookList_args, Callback> {
      public getBookList() {
        super("getBookList");
      }

      public getBookList_args getEmptyArgsInstance() {
        return new getBookList_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Callback> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Callback>() { 
          public void onComplete(Callback o) {
            getBookList_result result = new getBookList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getBookList_result result = new getBookList_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBookList_args args, org.apache.thrift.async.AsyncMethodCallback<Callback> resultHandler) throws org.apache.thrift.TException {
        iface.getBookList(resultHandler);
      }
    }

    public static class getBookChapters<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBookChapters_args, Callback> {
      public getBookChapters() {
        super("getBookChapters");
      }

      public getBookChapters_args getEmptyArgsInstance() {
        return new getBookChapters_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Callback> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Callback>() { 
          public void onComplete(Callback o) {
            getBookChapters_result result = new getBookChapters_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getBookChapters_result result = new getBookChapters_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBookChapters_args args, org.apache.thrift.async.AsyncMethodCallback<Callback> resultHandler) throws org.apache.thrift.TException {
        iface.getBookChapters(args.bookUid,resultHandler);
      }
    }

    public static class renameBook<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, renameBook_args, Void> {
      public renameBook() {
        super("renameBook");
      }

      public renameBook_args getEmptyArgsInstance() {
        return new renameBook_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            renameBook_result result = new renameBook_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            renameBook_result result = new renameBook_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, renameBook_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.renameBook(args.newValue,resultHandler);
      }
    }

    public static class renameBookChapter<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, renameBookChapter_args, Void> {
      public renameBookChapter() {
        super("renameBookChapter");
      }

      public renameBookChapter_args getEmptyArgsInstance() {
        return new renameBookChapter_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            renameBookChapter_result result = new renameBookChapter_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            renameBookChapter_result result = new renameBookChapter_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, renameBookChapter_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.renameBookChapter(args.bookUid, args.newValue,resultHandler);
      }
    }

    public static class getChapter<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getChapter_args, Callback> {
      public getChapter() {
        super("getChapter");
      }

      public getChapter_args getEmptyArgsInstance() {
        return new getChapter_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Callback> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Callback>() { 
          public void onComplete(Callback o) {
            getChapter_result result = new getChapter_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getChapter_result result = new getChapter_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getChapter_args args, org.apache.thrift.async.AsyncMethodCallback<Callback> resultHandler) throws org.apache.thrift.TException {
        iface.getChapter(args.bookUid, args.chapterUid,resultHandler);
      }
    }

    public static class updateChapter<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateChapter_args, Void> {
      public updateChapter() {
        super("updateChapter");
      }

      public updateChapter_args getEmptyArgsInstance() {
        return new updateChapter_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            updateChapter_result result = new updateChapter_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            updateChapter_result result = new updateChapter_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateChapter_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.updateChapter(args.bookUid, args.chapterUid, args.chapter,resultHandler);
      }
    }

    public static class removeBook<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeBook_args, Void> {
      public removeBook() {
        super("removeBook");
      }

      public removeBook_args getEmptyArgsInstance() {
        return new removeBook_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            removeBook_result result = new removeBook_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            removeBook_result result = new removeBook_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeBook_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.removeBook(args.bookUid,resultHandler);
      }
    }

    public static class removeChapter<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeChapter_args, Void> {
      public removeChapter() {
        super("removeChapter");
      }

      public removeChapter_args getEmptyArgsInstance() {
        return new removeChapter_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            removeChapter_result result = new removeChapter_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            removeChapter_result result = new removeChapter_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeChapter_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.removeChapter(args.bookUid, args.chapterUid,resultHandler);
      }
    }

    public static class addBook<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addBook_args, Void> {
      public addBook() {
        super("addBook");
      }

      public addBook_args getEmptyArgsInstance() {
        return new addBook_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            addBook_result result = new addBook_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            addBook_result result = new addBook_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addBook_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.addBook(args.bookName,resultHandler);
      }
    }

    public static class addChapter<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addChapter_args, Void> {
      public addChapter() {
        super("addChapter");
      }

      public addChapter_args getEmptyArgsInstance() {
        return new addChapter_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            addChapter_result result = new addChapter_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            addChapter_result result = new addChapter_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addChapter_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.addChapter(args.bookUid, args.chapterName,resultHandler);
      }
    }

    public static class subscribeForBookList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, subscribeForBookList_args, java.util.List<Callback>> {
      public subscribeForBookList() {
        super("subscribeForBookList");
      }

      public subscribeForBookList_args getEmptyArgsInstance() {
        return new subscribeForBookList_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Callback>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Callback>>() { 
          public void onComplete(java.util.List<Callback> o) {
            subscribeForBookList_result result = new subscribeForBookList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            subscribeForBookList_result result = new subscribeForBookList_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, subscribeForBookList_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Callback>> resultHandler) throws org.apache.thrift.TException {
        iface.subscribeForBookList(resultHandler);
      }
    }

    public static class subscribeForBookChapters<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, subscribeForBookChapters_args, java.util.List<Callback>> {
      public subscribeForBookChapters() {
        super("subscribeForBookChapters");
      }

      public subscribeForBookChapters_args getEmptyArgsInstance() {
        return new subscribeForBookChapters_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Callback>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Callback>>() { 
          public void onComplete(java.util.List<Callback> o) {
            subscribeForBookChapters_result result = new subscribeForBookChapters_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            subscribeForBookChapters_result result = new subscribeForBookChapters_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, subscribeForBookChapters_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Callback>> resultHandler) throws org.apache.thrift.TException {
        iface.subscribeForBookChapters(args.bookUid,resultHandler);
      }
    }

    public static class subscribeForChapter<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, subscribeForChapter_args, java.util.List<Callback>> {
      public subscribeForChapter() {
        super("subscribeForChapter");
      }

      public subscribeForChapter_args getEmptyArgsInstance() {
        return new subscribeForChapter_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Callback>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Callback>>() { 
          public void onComplete(java.util.List<Callback> o) {
            subscribeForChapter_result result = new subscribeForChapter_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            subscribeForChapter_result result = new subscribeForChapter_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, subscribeForChapter_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Callback>> resultHandler) throws org.apache.thrift.TException {
        iface.subscribeForChapter(args.bookUid, args.chapterUid,resultHandler);
      }
    }

  }

  public static class getBookList_args implements org.apache.thrift.TBase<getBookList_args, getBookList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBookList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBookList_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getBookList_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getBookList_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBookList_args.class, metaDataMap);
    }

    public getBookList_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBookList_args(getBookList_args other) {
    }

    public getBookList_args deepCopy() {
      return new getBookList_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getBookList_args)
        return this.equals((getBookList_args)that);
      return false;
    }

    public boolean equals(getBookList_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(getBookList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getBookList_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBookList_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getBookList_argsStandardScheme getScheme() {
        return new getBookList_argsStandardScheme();
      }
    }

    private static class getBookList_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getBookList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBookList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBookList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBookList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getBookList_argsTupleScheme getScheme() {
        return new getBookList_argsTupleScheme();
      }
    }

    private static class getBookList_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getBookList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBookList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBookList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getBookList_result implements org.apache.thrift.TBase<getBookList_result, getBookList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBookList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBookList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getBookList_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getBookList_resultTupleSchemeFactory();

    public Callback success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Callback.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBookList_result.class, metaDataMap);
    }

    public getBookList_result() {
    }

    public getBookList_result(
      Callback success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBookList_result(getBookList_result other) {
      if (other.isSetSuccess()) {
        this.success = new Callback(other.success);
      }
    }

    public getBookList_result deepCopy() {
      return new getBookList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Callback getSuccess() {
      return this.success;
    }

    public getBookList_result setSuccess(Callback success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Callback)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getBookList_result)
        return this.equals((getBookList_result)that);
      return false;
    }

    public boolean equals(getBookList_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getBookList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getBookList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBookList_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getBookList_resultStandardScheme getScheme() {
        return new getBookList_resultStandardScheme();
      }
    }

    private static class getBookList_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getBookList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBookList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Callback();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBookList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBookList_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getBookList_resultTupleScheme getScheme() {
        return new getBookList_resultTupleScheme();
      }
    }

    private static class getBookList_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getBookList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBookList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBookList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Callback();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getBookChapters_args implements org.apache.thrift.TBase<getBookChapters_args, getBookChapters_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBookChapters_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBookChapters_args");

    private static final org.apache.thrift.protocol.TField BOOK_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("bookUid", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getBookChapters_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getBookChapters_argsTupleSchemeFactory();

    public java.lang.String bookUid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BOOK_UID((short)1, "bookUid");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BOOK_UID
            return BOOK_UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BOOK_UID, new org.apache.thrift.meta_data.FieldMetaData("bookUid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBookChapters_args.class, metaDataMap);
    }

    public getBookChapters_args() {
    }

    public getBookChapters_args(
      java.lang.String bookUid)
    {
      this();
      this.bookUid = bookUid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBookChapters_args(getBookChapters_args other) {
      if (other.isSetBookUid()) {
        this.bookUid = other.bookUid;
      }
    }

    public getBookChapters_args deepCopy() {
      return new getBookChapters_args(this);
    }

    @Override
    public void clear() {
      this.bookUid = null;
    }

    public java.lang.String getBookUid() {
      return this.bookUid;
    }

    public getBookChapters_args setBookUid(java.lang.String bookUid) {
      this.bookUid = bookUid;
      return this;
    }

    public void unsetBookUid() {
      this.bookUid = null;
    }

    /** Returns true if field bookUid is set (has been assigned a value) and false otherwise */
    public boolean isSetBookUid() {
      return this.bookUid != null;
    }

    public void setBookUidIsSet(boolean value) {
      if (!value) {
        this.bookUid = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case BOOK_UID:
        if (value == null) {
          unsetBookUid();
        } else {
          setBookUid((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BOOK_UID:
        return getBookUid();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BOOK_UID:
        return isSetBookUid();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getBookChapters_args)
        return this.equals((getBookChapters_args)that);
      return false;
    }

    public boolean equals(getBookChapters_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bookUid = true && this.isSetBookUid();
      boolean that_present_bookUid = true && that.isSetBookUid();
      if (this_present_bookUid || that_present_bookUid) {
        if (!(this_present_bookUid && that_present_bookUid))
          return false;
        if (!this.bookUid.equals(that.bookUid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBookUid()) ? 131071 : 524287);
      if (isSetBookUid())
        hashCode = hashCode * 8191 + bookUid.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getBookChapters_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBookUid()).compareTo(other.isSetBookUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBookUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bookUid, other.bookUid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getBookChapters_args(");
      boolean first = true;

      sb.append("bookUid:");
      if (this.bookUid == null) {
        sb.append("null");
      } else {
        sb.append(this.bookUid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBookChapters_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getBookChapters_argsStandardScheme getScheme() {
        return new getBookChapters_argsStandardScheme();
      }
    }

    private static class getBookChapters_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getBookChapters_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBookChapters_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BOOK_UID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bookUid = iprot.readString();
                struct.setBookUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBookChapters_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bookUid != null) {
          oprot.writeFieldBegin(BOOK_UID_FIELD_DESC);
          oprot.writeString(struct.bookUid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBookChapters_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getBookChapters_argsTupleScheme getScheme() {
        return new getBookChapters_argsTupleScheme();
      }
    }

    private static class getBookChapters_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getBookChapters_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBookChapters_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBookUid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBookUid()) {
          oprot.writeString(struct.bookUid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBookChapters_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bookUid = iprot.readString();
          struct.setBookUidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getBookChapters_result implements org.apache.thrift.TBase<getBookChapters_result, getBookChapters_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBookChapters_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBookChapters_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getBookChapters_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getBookChapters_resultTupleSchemeFactory();

    public Callback success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Callback.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBookChapters_result.class, metaDataMap);
    }

    public getBookChapters_result() {
    }

    public getBookChapters_result(
      Callback success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBookChapters_result(getBookChapters_result other) {
      if (other.isSetSuccess()) {
        this.success = new Callback(other.success);
      }
    }

    public getBookChapters_result deepCopy() {
      return new getBookChapters_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Callback getSuccess() {
      return this.success;
    }

    public getBookChapters_result setSuccess(Callback success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Callback)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getBookChapters_result)
        return this.equals((getBookChapters_result)that);
      return false;
    }

    public boolean equals(getBookChapters_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getBookChapters_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getBookChapters_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBookChapters_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getBookChapters_resultStandardScheme getScheme() {
        return new getBookChapters_resultStandardScheme();
      }
    }

    private static class getBookChapters_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getBookChapters_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBookChapters_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Callback();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBookChapters_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBookChapters_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getBookChapters_resultTupleScheme getScheme() {
        return new getBookChapters_resultTupleScheme();
      }
    }

    private static class getBookChapters_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getBookChapters_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBookChapters_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBookChapters_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Callback();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class renameBook_args implements org.apache.thrift.TBase<renameBook_args, renameBook_args._Fields>, java.io.Serializable, Cloneable, Comparable<renameBook_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("renameBook_args");

    private static final org.apache.thrift.protocol.TField NEW_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("newValue", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new renameBook_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new renameBook_argsTupleSchemeFactory();

    public CustomPair newValue; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NEW_VALUE((short)1, "newValue");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NEW_VALUE
            return NEW_VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NEW_VALUE, new org.apache.thrift.meta_data.FieldMetaData("newValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CustomPair.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(renameBook_args.class, metaDataMap);
    }

    public renameBook_args() {
    }

    public renameBook_args(
      CustomPair newValue)
    {
      this();
      this.newValue = newValue;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public renameBook_args(renameBook_args other) {
      if (other.isSetNewValue()) {
        this.newValue = new CustomPair(other.newValue);
      }
    }

    public renameBook_args deepCopy() {
      return new renameBook_args(this);
    }

    @Override
    public void clear() {
      this.newValue = null;
    }

    public CustomPair getNewValue() {
      return this.newValue;
    }

    public renameBook_args setNewValue(CustomPair newValue) {
      this.newValue = newValue;
      return this;
    }

    public void unsetNewValue() {
      this.newValue = null;
    }

    /** Returns true if field newValue is set (has been assigned a value) and false otherwise */
    public boolean isSetNewValue() {
      return this.newValue != null;
    }

    public void setNewValueIsSet(boolean value) {
      if (!value) {
        this.newValue = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case NEW_VALUE:
        if (value == null) {
          unsetNewValue();
        } else {
          setNewValue((CustomPair)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case NEW_VALUE:
        return getNewValue();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case NEW_VALUE:
        return isSetNewValue();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof renameBook_args)
        return this.equals((renameBook_args)that);
      return false;
    }

    public boolean equals(renameBook_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_newValue = true && this.isSetNewValue();
      boolean that_present_newValue = true && that.isSetNewValue();
      if (this_present_newValue || that_present_newValue) {
        if (!(this_present_newValue && that_present_newValue))
          return false;
        if (!this.newValue.equals(that.newValue))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetNewValue()) ? 131071 : 524287);
      if (isSetNewValue())
        hashCode = hashCode * 8191 + newValue.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(renameBook_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetNewValue()).compareTo(other.isSetNewValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newValue, other.newValue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("renameBook_args(");
      boolean first = true;

      sb.append("newValue:");
      if (this.newValue == null) {
        sb.append("null");
      } else {
        sb.append(this.newValue);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (newValue != null) {
        newValue.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class renameBook_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public renameBook_argsStandardScheme getScheme() {
        return new renameBook_argsStandardScheme();
      }
    }

    private static class renameBook_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<renameBook_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, renameBook_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NEW_VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.newValue = new CustomPair();
                struct.newValue.read(iprot);
                struct.setNewValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, renameBook_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.newValue != null) {
          oprot.writeFieldBegin(NEW_VALUE_FIELD_DESC);
          struct.newValue.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class renameBook_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public renameBook_argsTupleScheme getScheme() {
        return new renameBook_argsTupleScheme();
      }
    }

    private static class renameBook_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<renameBook_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, renameBook_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNewValue()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNewValue()) {
          struct.newValue.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, renameBook_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.newValue = new CustomPair();
          struct.newValue.read(iprot);
          struct.setNewValueIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class renameBook_result implements org.apache.thrift.TBase<renameBook_result, renameBook_result._Fields>, java.io.Serializable, Cloneable, Comparable<renameBook_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("renameBook_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new renameBook_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new renameBook_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(renameBook_result.class, metaDataMap);
    }

    public renameBook_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public renameBook_result(renameBook_result other) {
    }

    public renameBook_result deepCopy() {
      return new renameBook_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof renameBook_result)
        return this.equals((renameBook_result)that);
      return false;
    }

    public boolean equals(renameBook_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(renameBook_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("renameBook_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class renameBook_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public renameBook_resultStandardScheme getScheme() {
        return new renameBook_resultStandardScheme();
      }
    }

    private static class renameBook_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<renameBook_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, renameBook_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, renameBook_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class renameBook_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public renameBook_resultTupleScheme getScheme() {
        return new renameBook_resultTupleScheme();
      }
    }

    private static class renameBook_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<renameBook_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, renameBook_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, renameBook_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class renameBookChapter_args implements org.apache.thrift.TBase<renameBookChapter_args, renameBookChapter_args._Fields>, java.io.Serializable, Cloneable, Comparable<renameBookChapter_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("renameBookChapter_args");

    private static final org.apache.thrift.protocol.TField BOOK_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("bookUid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NEW_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("newValue", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new renameBookChapter_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new renameBookChapter_argsTupleSchemeFactory();

    public java.lang.String bookUid; // required
    public CustomPair newValue; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BOOK_UID((short)1, "bookUid"),
      NEW_VALUE((short)2, "newValue");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BOOK_UID
            return BOOK_UID;
          case 2: // NEW_VALUE
            return NEW_VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BOOK_UID, new org.apache.thrift.meta_data.FieldMetaData("bookUid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NEW_VALUE, new org.apache.thrift.meta_data.FieldMetaData("newValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CustomPair.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(renameBookChapter_args.class, metaDataMap);
    }

    public renameBookChapter_args() {
    }

    public renameBookChapter_args(
      java.lang.String bookUid,
      CustomPair newValue)
    {
      this();
      this.bookUid = bookUid;
      this.newValue = newValue;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public renameBookChapter_args(renameBookChapter_args other) {
      if (other.isSetBookUid()) {
        this.bookUid = other.bookUid;
      }
      if (other.isSetNewValue()) {
        this.newValue = new CustomPair(other.newValue);
      }
    }

    public renameBookChapter_args deepCopy() {
      return new renameBookChapter_args(this);
    }

    @Override
    public void clear() {
      this.bookUid = null;
      this.newValue = null;
    }

    public java.lang.String getBookUid() {
      return this.bookUid;
    }

    public renameBookChapter_args setBookUid(java.lang.String bookUid) {
      this.bookUid = bookUid;
      return this;
    }

    public void unsetBookUid() {
      this.bookUid = null;
    }

    /** Returns true if field bookUid is set (has been assigned a value) and false otherwise */
    public boolean isSetBookUid() {
      return this.bookUid != null;
    }

    public void setBookUidIsSet(boolean value) {
      if (!value) {
        this.bookUid = null;
      }
    }

    public CustomPair getNewValue() {
      return this.newValue;
    }

    public renameBookChapter_args setNewValue(CustomPair newValue) {
      this.newValue = newValue;
      return this;
    }

    public void unsetNewValue() {
      this.newValue = null;
    }

    /** Returns true if field newValue is set (has been assigned a value) and false otherwise */
    public boolean isSetNewValue() {
      return this.newValue != null;
    }

    public void setNewValueIsSet(boolean value) {
      if (!value) {
        this.newValue = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case BOOK_UID:
        if (value == null) {
          unsetBookUid();
        } else {
          setBookUid((java.lang.String)value);
        }
        break;

      case NEW_VALUE:
        if (value == null) {
          unsetNewValue();
        } else {
          setNewValue((CustomPair)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BOOK_UID:
        return getBookUid();

      case NEW_VALUE:
        return getNewValue();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BOOK_UID:
        return isSetBookUid();
      case NEW_VALUE:
        return isSetNewValue();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof renameBookChapter_args)
        return this.equals((renameBookChapter_args)that);
      return false;
    }

    public boolean equals(renameBookChapter_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bookUid = true && this.isSetBookUid();
      boolean that_present_bookUid = true && that.isSetBookUid();
      if (this_present_bookUid || that_present_bookUid) {
        if (!(this_present_bookUid && that_present_bookUid))
          return false;
        if (!this.bookUid.equals(that.bookUid))
          return false;
      }

      boolean this_present_newValue = true && this.isSetNewValue();
      boolean that_present_newValue = true && that.isSetNewValue();
      if (this_present_newValue || that_present_newValue) {
        if (!(this_present_newValue && that_present_newValue))
          return false;
        if (!this.newValue.equals(that.newValue))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBookUid()) ? 131071 : 524287);
      if (isSetBookUid())
        hashCode = hashCode * 8191 + bookUid.hashCode();

      hashCode = hashCode * 8191 + ((isSetNewValue()) ? 131071 : 524287);
      if (isSetNewValue())
        hashCode = hashCode * 8191 + newValue.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(renameBookChapter_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBookUid()).compareTo(other.isSetBookUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBookUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bookUid, other.bookUid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNewValue()).compareTo(other.isSetNewValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newValue, other.newValue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("renameBookChapter_args(");
      boolean first = true;

      sb.append("bookUid:");
      if (this.bookUid == null) {
        sb.append("null");
      } else {
        sb.append(this.bookUid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("newValue:");
      if (this.newValue == null) {
        sb.append("null");
      } else {
        sb.append(this.newValue);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (newValue != null) {
        newValue.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class renameBookChapter_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public renameBookChapter_argsStandardScheme getScheme() {
        return new renameBookChapter_argsStandardScheme();
      }
    }

    private static class renameBookChapter_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<renameBookChapter_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, renameBookChapter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BOOK_UID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bookUid = iprot.readString();
                struct.setBookUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NEW_VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.newValue = new CustomPair();
                struct.newValue.read(iprot);
                struct.setNewValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, renameBookChapter_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bookUid != null) {
          oprot.writeFieldBegin(BOOK_UID_FIELD_DESC);
          oprot.writeString(struct.bookUid);
          oprot.writeFieldEnd();
        }
        if (struct.newValue != null) {
          oprot.writeFieldBegin(NEW_VALUE_FIELD_DESC);
          struct.newValue.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class renameBookChapter_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public renameBookChapter_argsTupleScheme getScheme() {
        return new renameBookChapter_argsTupleScheme();
      }
    }

    private static class renameBookChapter_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<renameBookChapter_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, renameBookChapter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBookUid()) {
          optionals.set(0);
        }
        if (struct.isSetNewValue()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBookUid()) {
          oprot.writeString(struct.bookUid);
        }
        if (struct.isSetNewValue()) {
          struct.newValue.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, renameBookChapter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.bookUid = iprot.readString();
          struct.setBookUidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.newValue = new CustomPair();
          struct.newValue.read(iprot);
          struct.setNewValueIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class renameBookChapter_result implements org.apache.thrift.TBase<renameBookChapter_result, renameBookChapter_result._Fields>, java.io.Serializable, Cloneable, Comparable<renameBookChapter_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("renameBookChapter_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new renameBookChapter_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new renameBookChapter_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(renameBookChapter_result.class, metaDataMap);
    }

    public renameBookChapter_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public renameBookChapter_result(renameBookChapter_result other) {
    }

    public renameBookChapter_result deepCopy() {
      return new renameBookChapter_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof renameBookChapter_result)
        return this.equals((renameBookChapter_result)that);
      return false;
    }

    public boolean equals(renameBookChapter_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(renameBookChapter_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("renameBookChapter_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class renameBookChapter_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public renameBookChapter_resultStandardScheme getScheme() {
        return new renameBookChapter_resultStandardScheme();
      }
    }

    private static class renameBookChapter_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<renameBookChapter_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, renameBookChapter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, renameBookChapter_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class renameBookChapter_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public renameBookChapter_resultTupleScheme getScheme() {
        return new renameBookChapter_resultTupleScheme();
      }
    }

    private static class renameBookChapter_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<renameBookChapter_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, renameBookChapter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, renameBookChapter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getChapter_args implements org.apache.thrift.TBase<getChapter_args, getChapter_args._Fields>, java.io.Serializable, Cloneable, Comparable<getChapter_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getChapter_args");

    private static final org.apache.thrift.protocol.TField BOOK_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("bookUid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CHAPTER_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("chapterUid", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getChapter_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getChapter_argsTupleSchemeFactory();

    public java.lang.String bookUid; // required
    public java.lang.String chapterUid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BOOK_UID((short)1, "bookUid"),
      CHAPTER_UID((short)2, "chapterUid");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BOOK_UID
            return BOOK_UID;
          case 2: // CHAPTER_UID
            return CHAPTER_UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BOOK_UID, new org.apache.thrift.meta_data.FieldMetaData("bookUid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CHAPTER_UID, new org.apache.thrift.meta_data.FieldMetaData("chapterUid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getChapter_args.class, metaDataMap);
    }

    public getChapter_args() {
    }

    public getChapter_args(
      java.lang.String bookUid,
      java.lang.String chapterUid)
    {
      this();
      this.bookUid = bookUid;
      this.chapterUid = chapterUid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getChapter_args(getChapter_args other) {
      if (other.isSetBookUid()) {
        this.bookUid = other.bookUid;
      }
      if (other.isSetChapterUid()) {
        this.chapterUid = other.chapterUid;
      }
    }

    public getChapter_args deepCopy() {
      return new getChapter_args(this);
    }

    @Override
    public void clear() {
      this.bookUid = null;
      this.chapterUid = null;
    }

    public java.lang.String getBookUid() {
      return this.bookUid;
    }

    public getChapter_args setBookUid(java.lang.String bookUid) {
      this.bookUid = bookUid;
      return this;
    }

    public void unsetBookUid() {
      this.bookUid = null;
    }

    /** Returns true if field bookUid is set (has been assigned a value) and false otherwise */
    public boolean isSetBookUid() {
      return this.bookUid != null;
    }

    public void setBookUidIsSet(boolean value) {
      if (!value) {
        this.bookUid = null;
      }
    }

    public java.lang.String getChapterUid() {
      return this.chapterUid;
    }

    public getChapter_args setChapterUid(java.lang.String chapterUid) {
      this.chapterUid = chapterUid;
      return this;
    }

    public void unsetChapterUid() {
      this.chapterUid = null;
    }

    /** Returns true if field chapterUid is set (has been assigned a value) and false otherwise */
    public boolean isSetChapterUid() {
      return this.chapterUid != null;
    }

    public void setChapterUidIsSet(boolean value) {
      if (!value) {
        this.chapterUid = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case BOOK_UID:
        if (value == null) {
          unsetBookUid();
        } else {
          setBookUid((java.lang.String)value);
        }
        break;

      case CHAPTER_UID:
        if (value == null) {
          unsetChapterUid();
        } else {
          setChapterUid((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BOOK_UID:
        return getBookUid();

      case CHAPTER_UID:
        return getChapterUid();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BOOK_UID:
        return isSetBookUid();
      case CHAPTER_UID:
        return isSetChapterUid();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getChapter_args)
        return this.equals((getChapter_args)that);
      return false;
    }

    public boolean equals(getChapter_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bookUid = true && this.isSetBookUid();
      boolean that_present_bookUid = true && that.isSetBookUid();
      if (this_present_bookUid || that_present_bookUid) {
        if (!(this_present_bookUid && that_present_bookUid))
          return false;
        if (!this.bookUid.equals(that.bookUid))
          return false;
      }

      boolean this_present_chapterUid = true && this.isSetChapterUid();
      boolean that_present_chapterUid = true && that.isSetChapterUid();
      if (this_present_chapterUid || that_present_chapterUid) {
        if (!(this_present_chapterUid && that_present_chapterUid))
          return false;
        if (!this.chapterUid.equals(that.chapterUid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBookUid()) ? 131071 : 524287);
      if (isSetBookUid())
        hashCode = hashCode * 8191 + bookUid.hashCode();

      hashCode = hashCode * 8191 + ((isSetChapterUid()) ? 131071 : 524287);
      if (isSetChapterUid())
        hashCode = hashCode * 8191 + chapterUid.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getChapter_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBookUid()).compareTo(other.isSetBookUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBookUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bookUid, other.bookUid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetChapterUid()).compareTo(other.isSetChapterUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChapterUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chapterUid, other.chapterUid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getChapter_args(");
      boolean first = true;

      sb.append("bookUid:");
      if (this.bookUid == null) {
        sb.append("null");
      } else {
        sb.append(this.bookUid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("chapterUid:");
      if (this.chapterUid == null) {
        sb.append("null");
      } else {
        sb.append(this.chapterUid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getChapter_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getChapter_argsStandardScheme getScheme() {
        return new getChapter_argsStandardScheme();
      }
    }

    private static class getChapter_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getChapter_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getChapter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BOOK_UID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bookUid = iprot.readString();
                struct.setBookUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CHAPTER_UID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.chapterUid = iprot.readString();
                struct.setChapterUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getChapter_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bookUid != null) {
          oprot.writeFieldBegin(BOOK_UID_FIELD_DESC);
          oprot.writeString(struct.bookUid);
          oprot.writeFieldEnd();
        }
        if (struct.chapterUid != null) {
          oprot.writeFieldBegin(CHAPTER_UID_FIELD_DESC);
          oprot.writeString(struct.chapterUid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getChapter_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getChapter_argsTupleScheme getScheme() {
        return new getChapter_argsTupleScheme();
      }
    }

    private static class getChapter_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getChapter_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getChapter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBookUid()) {
          optionals.set(0);
        }
        if (struct.isSetChapterUid()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBookUid()) {
          oprot.writeString(struct.bookUid);
        }
        if (struct.isSetChapterUid()) {
          oprot.writeString(struct.chapterUid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getChapter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.bookUid = iprot.readString();
          struct.setBookUidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.chapterUid = iprot.readString();
          struct.setChapterUidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getChapter_result implements org.apache.thrift.TBase<getChapter_result, getChapter_result._Fields>, java.io.Serializable, Cloneable, Comparable<getChapter_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getChapter_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getChapter_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getChapter_resultTupleSchemeFactory();

    public Callback success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Callback.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getChapter_result.class, metaDataMap);
    }

    public getChapter_result() {
    }

    public getChapter_result(
      Callback success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getChapter_result(getChapter_result other) {
      if (other.isSetSuccess()) {
        this.success = new Callback(other.success);
      }
    }

    public getChapter_result deepCopy() {
      return new getChapter_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Callback getSuccess() {
      return this.success;
    }

    public getChapter_result setSuccess(Callback success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Callback)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getChapter_result)
        return this.equals((getChapter_result)that);
      return false;
    }

    public boolean equals(getChapter_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getChapter_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getChapter_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getChapter_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getChapter_resultStandardScheme getScheme() {
        return new getChapter_resultStandardScheme();
      }
    }

    private static class getChapter_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getChapter_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getChapter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Callback();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getChapter_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getChapter_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getChapter_resultTupleScheme getScheme() {
        return new getChapter_resultTupleScheme();
      }
    }

    private static class getChapter_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getChapter_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getChapter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getChapter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Callback();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateChapter_args implements org.apache.thrift.TBase<updateChapter_args, updateChapter_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateChapter_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateChapter_args");

    private static final org.apache.thrift.protocol.TField BOOK_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("bookUid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CHAPTER_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("chapterUid", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CHAPTER_FIELD_DESC = new org.apache.thrift.protocol.TField("chapter", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateChapter_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateChapter_argsTupleSchemeFactory();

    public java.lang.String bookUid; // required
    public java.lang.String chapterUid; // required
    public Chapter chapter; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BOOK_UID((short)1, "bookUid"),
      CHAPTER_UID((short)2, "chapterUid"),
      CHAPTER((short)3, "chapter");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BOOK_UID
            return BOOK_UID;
          case 2: // CHAPTER_UID
            return CHAPTER_UID;
          case 3: // CHAPTER
            return CHAPTER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BOOK_UID, new org.apache.thrift.meta_data.FieldMetaData("bookUid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CHAPTER_UID, new org.apache.thrift.meta_data.FieldMetaData("chapterUid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CHAPTER, new org.apache.thrift.meta_data.FieldMetaData("chapter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Chapter.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateChapter_args.class, metaDataMap);
    }

    public updateChapter_args() {
    }

    public updateChapter_args(
      java.lang.String bookUid,
      java.lang.String chapterUid,
      Chapter chapter)
    {
      this();
      this.bookUid = bookUid;
      this.chapterUid = chapterUid;
      this.chapter = chapter;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateChapter_args(updateChapter_args other) {
      if (other.isSetBookUid()) {
        this.bookUid = other.bookUid;
      }
      if (other.isSetChapterUid()) {
        this.chapterUid = other.chapterUid;
      }
      if (other.isSetChapter()) {
        this.chapter = new Chapter(other.chapter);
      }
    }

    public updateChapter_args deepCopy() {
      return new updateChapter_args(this);
    }

    @Override
    public void clear() {
      this.bookUid = null;
      this.chapterUid = null;
      this.chapter = null;
    }

    public java.lang.String getBookUid() {
      return this.bookUid;
    }

    public updateChapter_args setBookUid(java.lang.String bookUid) {
      this.bookUid = bookUid;
      return this;
    }

    public void unsetBookUid() {
      this.bookUid = null;
    }

    /** Returns true if field bookUid is set (has been assigned a value) and false otherwise */
    public boolean isSetBookUid() {
      return this.bookUid != null;
    }

    public void setBookUidIsSet(boolean value) {
      if (!value) {
        this.bookUid = null;
      }
    }

    public java.lang.String getChapterUid() {
      return this.chapterUid;
    }

    public updateChapter_args setChapterUid(java.lang.String chapterUid) {
      this.chapterUid = chapterUid;
      return this;
    }

    public void unsetChapterUid() {
      this.chapterUid = null;
    }

    /** Returns true if field chapterUid is set (has been assigned a value) and false otherwise */
    public boolean isSetChapterUid() {
      return this.chapterUid != null;
    }

    public void setChapterUidIsSet(boolean value) {
      if (!value) {
        this.chapterUid = null;
      }
    }

    public Chapter getChapter() {
      return this.chapter;
    }

    public updateChapter_args setChapter(Chapter chapter) {
      this.chapter = chapter;
      return this;
    }

    public void unsetChapter() {
      this.chapter = null;
    }

    /** Returns true if field chapter is set (has been assigned a value) and false otherwise */
    public boolean isSetChapter() {
      return this.chapter != null;
    }

    public void setChapterIsSet(boolean value) {
      if (!value) {
        this.chapter = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case BOOK_UID:
        if (value == null) {
          unsetBookUid();
        } else {
          setBookUid((java.lang.String)value);
        }
        break;

      case CHAPTER_UID:
        if (value == null) {
          unsetChapterUid();
        } else {
          setChapterUid((java.lang.String)value);
        }
        break;

      case CHAPTER:
        if (value == null) {
          unsetChapter();
        } else {
          setChapter((Chapter)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BOOK_UID:
        return getBookUid();

      case CHAPTER_UID:
        return getChapterUid();

      case CHAPTER:
        return getChapter();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BOOK_UID:
        return isSetBookUid();
      case CHAPTER_UID:
        return isSetChapterUid();
      case CHAPTER:
        return isSetChapter();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateChapter_args)
        return this.equals((updateChapter_args)that);
      return false;
    }

    public boolean equals(updateChapter_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bookUid = true && this.isSetBookUid();
      boolean that_present_bookUid = true && that.isSetBookUid();
      if (this_present_bookUid || that_present_bookUid) {
        if (!(this_present_bookUid && that_present_bookUid))
          return false;
        if (!this.bookUid.equals(that.bookUid))
          return false;
      }

      boolean this_present_chapterUid = true && this.isSetChapterUid();
      boolean that_present_chapterUid = true && that.isSetChapterUid();
      if (this_present_chapterUid || that_present_chapterUid) {
        if (!(this_present_chapterUid && that_present_chapterUid))
          return false;
        if (!this.chapterUid.equals(that.chapterUid))
          return false;
      }

      boolean this_present_chapter = true && this.isSetChapter();
      boolean that_present_chapter = true && that.isSetChapter();
      if (this_present_chapter || that_present_chapter) {
        if (!(this_present_chapter && that_present_chapter))
          return false;
        if (!this.chapter.equals(that.chapter))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBookUid()) ? 131071 : 524287);
      if (isSetBookUid())
        hashCode = hashCode * 8191 + bookUid.hashCode();

      hashCode = hashCode * 8191 + ((isSetChapterUid()) ? 131071 : 524287);
      if (isSetChapterUid())
        hashCode = hashCode * 8191 + chapterUid.hashCode();

      hashCode = hashCode * 8191 + ((isSetChapter()) ? 131071 : 524287);
      if (isSetChapter())
        hashCode = hashCode * 8191 + chapter.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateChapter_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBookUid()).compareTo(other.isSetBookUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBookUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bookUid, other.bookUid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetChapterUid()).compareTo(other.isSetChapterUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChapterUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chapterUid, other.chapterUid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetChapter()).compareTo(other.isSetChapter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChapter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chapter, other.chapter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateChapter_args(");
      boolean first = true;

      sb.append("bookUid:");
      if (this.bookUid == null) {
        sb.append("null");
      } else {
        sb.append(this.bookUid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("chapterUid:");
      if (this.chapterUid == null) {
        sb.append("null");
      } else {
        sb.append(this.chapterUid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("chapter:");
      if (this.chapter == null) {
        sb.append("null");
      } else {
        sb.append(this.chapter);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (chapter != null) {
        chapter.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateChapter_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateChapter_argsStandardScheme getScheme() {
        return new updateChapter_argsStandardScheme();
      }
    }

    private static class updateChapter_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateChapter_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateChapter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BOOK_UID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bookUid = iprot.readString();
                struct.setBookUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CHAPTER_UID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.chapterUid = iprot.readString();
                struct.setChapterUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CHAPTER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.chapter = new Chapter();
                struct.chapter.read(iprot);
                struct.setChapterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateChapter_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bookUid != null) {
          oprot.writeFieldBegin(BOOK_UID_FIELD_DESC);
          oprot.writeString(struct.bookUid);
          oprot.writeFieldEnd();
        }
        if (struct.chapterUid != null) {
          oprot.writeFieldBegin(CHAPTER_UID_FIELD_DESC);
          oprot.writeString(struct.chapterUid);
          oprot.writeFieldEnd();
        }
        if (struct.chapter != null) {
          oprot.writeFieldBegin(CHAPTER_FIELD_DESC);
          struct.chapter.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateChapter_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateChapter_argsTupleScheme getScheme() {
        return new updateChapter_argsTupleScheme();
      }
    }

    private static class updateChapter_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateChapter_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateChapter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBookUid()) {
          optionals.set(0);
        }
        if (struct.isSetChapterUid()) {
          optionals.set(1);
        }
        if (struct.isSetChapter()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetBookUid()) {
          oprot.writeString(struct.bookUid);
        }
        if (struct.isSetChapterUid()) {
          oprot.writeString(struct.chapterUid);
        }
        if (struct.isSetChapter()) {
          struct.chapter.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateChapter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.bookUid = iprot.readString();
          struct.setBookUidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.chapterUid = iprot.readString();
          struct.setChapterUidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.chapter = new Chapter();
          struct.chapter.read(iprot);
          struct.setChapterIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateChapter_result implements org.apache.thrift.TBase<updateChapter_result, updateChapter_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateChapter_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateChapter_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateChapter_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateChapter_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateChapter_result.class, metaDataMap);
    }

    public updateChapter_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateChapter_result(updateChapter_result other) {
    }

    public updateChapter_result deepCopy() {
      return new updateChapter_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateChapter_result)
        return this.equals((updateChapter_result)that);
      return false;
    }

    public boolean equals(updateChapter_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(updateChapter_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateChapter_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateChapter_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateChapter_resultStandardScheme getScheme() {
        return new updateChapter_resultStandardScheme();
      }
    }

    private static class updateChapter_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateChapter_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateChapter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateChapter_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateChapter_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateChapter_resultTupleScheme getScheme() {
        return new updateChapter_resultTupleScheme();
      }
    }

    private static class updateChapter_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateChapter_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateChapter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateChapter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class removeBook_args implements org.apache.thrift.TBase<removeBook_args, removeBook_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeBook_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeBook_args");

    private static final org.apache.thrift.protocol.TField BOOK_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("bookUid", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new removeBook_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new removeBook_argsTupleSchemeFactory();

    public java.lang.String bookUid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BOOK_UID((short)1, "bookUid");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BOOK_UID
            return BOOK_UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BOOK_UID, new org.apache.thrift.meta_data.FieldMetaData("bookUid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeBook_args.class, metaDataMap);
    }

    public removeBook_args() {
    }

    public removeBook_args(
      java.lang.String bookUid)
    {
      this();
      this.bookUid = bookUid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeBook_args(removeBook_args other) {
      if (other.isSetBookUid()) {
        this.bookUid = other.bookUid;
      }
    }

    public removeBook_args deepCopy() {
      return new removeBook_args(this);
    }

    @Override
    public void clear() {
      this.bookUid = null;
    }

    public java.lang.String getBookUid() {
      return this.bookUid;
    }

    public removeBook_args setBookUid(java.lang.String bookUid) {
      this.bookUid = bookUid;
      return this;
    }

    public void unsetBookUid() {
      this.bookUid = null;
    }

    /** Returns true if field bookUid is set (has been assigned a value) and false otherwise */
    public boolean isSetBookUid() {
      return this.bookUid != null;
    }

    public void setBookUidIsSet(boolean value) {
      if (!value) {
        this.bookUid = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case BOOK_UID:
        if (value == null) {
          unsetBookUid();
        } else {
          setBookUid((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BOOK_UID:
        return getBookUid();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BOOK_UID:
        return isSetBookUid();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof removeBook_args)
        return this.equals((removeBook_args)that);
      return false;
    }

    public boolean equals(removeBook_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bookUid = true && this.isSetBookUid();
      boolean that_present_bookUid = true && that.isSetBookUid();
      if (this_present_bookUid || that_present_bookUid) {
        if (!(this_present_bookUid && that_present_bookUid))
          return false;
        if (!this.bookUid.equals(that.bookUid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBookUid()) ? 131071 : 524287);
      if (isSetBookUid())
        hashCode = hashCode * 8191 + bookUid.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(removeBook_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBookUid()).compareTo(other.isSetBookUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBookUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bookUid, other.bookUid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("removeBook_args(");
      boolean first = true;

      sb.append("bookUid:");
      if (this.bookUid == null) {
        sb.append("null");
      } else {
        sb.append(this.bookUid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeBook_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeBook_argsStandardScheme getScheme() {
        return new removeBook_argsStandardScheme();
      }
    }

    private static class removeBook_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<removeBook_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeBook_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BOOK_UID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bookUid = iprot.readString();
                struct.setBookUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeBook_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bookUid != null) {
          oprot.writeFieldBegin(BOOK_UID_FIELD_DESC);
          oprot.writeString(struct.bookUid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeBook_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeBook_argsTupleScheme getScheme() {
        return new removeBook_argsTupleScheme();
      }
    }

    private static class removeBook_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<removeBook_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeBook_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBookUid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBookUid()) {
          oprot.writeString(struct.bookUid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeBook_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bookUid = iprot.readString();
          struct.setBookUidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class removeBook_result implements org.apache.thrift.TBase<removeBook_result, removeBook_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeBook_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeBook_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new removeBook_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new removeBook_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeBook_result.class, metaDataMap);
    }

    public removeBook_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeBook_result(removeBook_result other) {
    }

    public removeBook_result deepCopy() {
      return new removeBook_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof removeBook_result)
        return this.equals((removeBook_result)that);
      return false;
    }

    public boolean equals(removeBook_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(removeBook_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("removeBook_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeBook_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeBook_resultStandardScheme getScheme() {
        return new removeBook_resultStandardScheme();
      }
    }

    private static class removeBook_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<removeBook_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeBook_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeBook_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeBook_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeBook_resultTupleScheme getScheme() {
        return new removeBook_resultTupleScheme();
      }
    }

    private static class removeBook_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<removeBook_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeBook_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeBook_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class removeChapter_args implements org.apache.thrift.TBase<removeChapter_args, removeChapter_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeChapter_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeChapter_args");

    private static final org.apache.thrift.protocol.TField BOOK_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("bookUid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CHAPTER_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("chapterUid", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new removeChapter_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new removeChapter_argsTupleSchemeFactory();

    public java.lang.String bookUid; // required
    public java.lang.String chapterUid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BOOK_UID((short)1, "bookUid"),
      CHAPTER_UID((short)2, "chapterUid");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BOOK_UID
            return BOOK_UID;
          case 2: // CHAPTER_UID
            return CHAPTER_UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BOOK_UID, new org.apache.thrift.meta_data.FieldMetaData("bookUid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CHAPTER_UID, new org.apache.thrift.meta_data.FieldMetaData("chapterUid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeChapter_args.class, metaDataMap);
    }

    public removeChapter_args() {
    }

    public removeChapter_args(
      java.lang.String bookUid,
      java.lang.String chapterUid)
    {
      this();
      this.bookUid = bookUid;
      this.chapterUid = chapterUid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeChapter_args(removeChapter_args other) {
      if (other.isSetBookUid()) {
        this.bookUid = other.bookUid;
      }
      if (other.isSetChapterUid()) {
        this.chapterUid = other.chapterUid;
      }
    }

    public removeChapter_args deepCopy() {
      return new removeChapter_args(this);
    }

    @Override
    public void clear() {
      this.bookUid = null;
      this.chapterUid = null;
    }

    public java.lang.String getBookUid() {
      return this.bookUid;
    }

    public removeChapter_args setBookUid(java.lang.String bookUid) {
      this.bookUid = bookUid;
      return this;
    }

    public void unsetBookUid() {
      this.bookUid = null;
    }

    /** Returns true if field bookUid is set (has been assigned a value) and false otherwise */
    public boolean isSetBookUid() {
      return this.bookUid != null;
    }

    public void setBookUidIsSet(boolean value) {
      if (!value) {
        this.bookUid = null;
      }
    }

    public java.lang.String getChapterUid() {
      return this.chapterUid;
    }

    public removeChapter_args setChapterUid(java.lang.String chapterUid) {
      this.chapterUid = chapterUid;
      return this;
    }

    public void unsetChapterUid() {
      this.chapterUid = null;
    }

    /** Returns true if field chapterUid is set (has been assigned a value) and false otherwise */
    public boolean isSetChapterUid() {
      return this.chapterUid != null;
    }

    public void setChapterUidIsSet(boolean value) {
      if (!value) {
        this.chapterUid = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case BOOK_UID:
        if (value == null) {
          unsetBookUid();
        } else {
          setBookUid((java.lang.String)value);
        }
        break;

      case CHAPTER_UID:
        if (value == null) {
          unsetChapterUid();
        } else {
          setChapterUid((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BOOK_UID:
        return getBookUid();

      case CHAPTER_UID:
        return getChapterUid();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BOOK_UID:
        return isSetBookUid();
      case CHAPTER_UID:
        return isSetChapterUid();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof removeChapter_args)
        return this.equals((removeChapter_args)that);
      return false;
    }

    public boolean equals(removeChapter_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bookUid = true && this.isSetBookUid();
      boolean that_present_bookUid = true && that.isSetBookUid();
      if (this_present_bookUid || that_present_bookUid) {
        if (!(this_present_bookUid && that_present_bookUid))
          return false;
        if (!this.bookUid.equals(that.bookUid))
          return false;
      }

      boolean this_present_chapterUid = true && this.isSetChapterUid();
      boolean that_present_chapterUid = true && that.isSetChapterUid();
      if (this_present_chapterUid || that_present_chapterUid) {
        if (!(this_present_chapterUid && that_present_chapterUid))
          return false;
        if (!this.chapterUid.equals(that.chapterUid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBookUid()) ? 131071 : 524287);
      if (isSetBookUid())
        hashCode = hashCode * 8191 + bookUid.hashCode();

      hashCode = hashCode * 8191 + ((isSetChapterUid()) ? 131071 : 524287);
      if (isSetChapterUid())
        hashCode = hashCode * 8191 + chapterUid.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(removeChapter_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBookUid()).compareTo(other.isSetBookUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBookUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bookUid, other.bookUid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetChapterUid()).compareTo(other.isSetChapterUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChapterUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chapterUid, other.chapterUid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("removeChapter_args(");
      boolean first = true;

      sb.append("bookUid:");
      if (this.bookUid == null) {
        sb.append("null");
      } else {
        sb.append(this.bookUid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("chapterUid:");
      if (this.chapterUid == null) {
        sb.append("null");
      } else {
        sb.append(this.chapterUid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeChapter_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeChapter_argsStandardScheme getScheme() {
        return new removeChapter_argsStandardScheme();
      }
    }

    private static class removeChapter_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<removeChapter_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeChapter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BOOK_UID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bookUid = iprot.readString();
                struct.setBookUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CHAPTER_UID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.chapterUid = iprot.readString();
                struct.setChapterUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeChapter_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bookUid != null) {
          oprot.writeFieldBegin(BOOK_UID_FIELD_DESC);
          oprot.writeString(struct.bookUid);
          oprot.writeFieldEnd();
        }
        if (struct.chapterUid != null) {
          oprot.writeFieldBegin(CHAPTER_UID_FIELD_DESC);
          oprot.writeString(struct.chapterUid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeChapter_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeChapter_argsTupleScheme getScheme() {
        return new removeChapter_argsTupleScheme();
      }
    }

    private static class removeChapter_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<removeChapter_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeChapter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBookUid()) {
          optionals.set(0);
        }
        if (struct.isSetChapterUid()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBookUid()) {
          oprot.writeString(struct.bookUid);
        }
        if (struct.isSetChapterUid()) {
          oprot.writeString(struct.chapterUid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeChapter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.bookUid = iprot.readString();
          struct.setBookUidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.chapterUid = iprot.readString();
          struct.setChapterUidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class removeChapter_result implements org.apache.thrift.TBase<removeChapter_result, removeChapter_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeChapter_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeChapter_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new removeChapter_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new removeChapter_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeChapter_result.class, metaDataMap);
    }

    public removeChapter_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeChapter_result(removeChapter_result other) {
    }

    public removeChapter_result deepCopy() {
      return new removeChapter_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof removeChapter_result)
        return this.equals((removeChapter_result)that);
      return false;
    }

    public boolean equals(removeChapter_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(removeChapter_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("removeChapter_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeChapter_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeChapter_resultStandardScheme getScheme() {
        return new removeChapter_resultStandardScheme();
      }
    }

    private static class removeChapter_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<removeChapter_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeChapter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeChapter_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeChapter_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeChapter_resultTupleScheme getScheme() {
        return new removeChapter_resultTupleScheme();
      }
    }

    private static class removeChapter_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<removeChapter_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeChapter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeChapter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addBook_args implements org.apache.thrift.TBase<addBook_args, addBook_args._Fields>, java.io.Serializable, Cloneable, Comparable<addBook_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addBook_args");

    private static final org.apache.thrift.protocol.TField BOOK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bookName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addBook_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addBook_argsTupleSchemeFactory();

    public java.lang.String bookName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BOOK_NAME((short)1, "bookName");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BOOK_NAME
            return BOOK_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BOOK_NAME, new org.apache.thrift.meta_data.FieldMetaData("bookName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addBook_args.class, metaDataMap);
    }

    public addBook_args() {
    }

    public addBook_args(
      java.lang.String bookName)
    {
      this();
      this.bookName = bookName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addBook_args(addBook_args other) {
      if (other.isSetBookName()) {
        this.bookName = other.bookName;
      }
    }

    public addBook_args deepCopy() {
      return new addBook_args(this);
    }

    @Override
    public void clear() {
      this.bookName = null;
    }

    public java.lang.String getBookName() {
      return this.bookName;
    }

    public addBook_args setBookName(java.lang.String bookName) {
      this.bookName = bookName;
      return this;
    }

    public void unsetBookName() {
      this.bookName = null;
    }

    /** Returns true if field bookName is set (has been assigned a value) and false otherwise */
    public boolean isSetBookName() {
      return this.bookName != null;
    }

    public void setBookNameIsSet(boolean value) {
      if (!value) {
        this.bookName = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case BOOK_NAME:
        if (value == null) {
          unsetBookName();
        } else {
          setBookName((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BOOK_NAME:
        return getBookName();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BOOK_NAME:
        return isSetBookName();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof addBook_args)
        return this.equals((addBook_args)that);
      return false;
    }

    public boolean equals(addBook_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bookName = true && this.isSetBookName();
      boolean that_present_bookName = true && that.isSetBookName();
      if (this_present_bookName || that_present_bookName) {
        if (!(this_present_bookName && that_present_bookName))
          return false;
        if (!this.bookName.equals(that.bookName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBookName()) ? 131071 : 524287);
      if (isSetBookName())
        hashCode = hashCode * 8191 + bookName.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addBook_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBookName()).compareTo(other.isSetBookName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBookName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bookName, other.bookName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addBook_args(");
      boolean first = true;

      sb.append("bookName:");
      if (this.bookName == null) {
        sb.append("null");
      } else {
        sb.append(this.bookName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addBook_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addBook_argsStandardScheme getScheme() {
        return new addBook_argsStandardScheme();
      }
    }

    private static class addBook_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addBook_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addBook_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BOOK_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bookName = iprot.readString();
                struct.setBookNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addBook_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bookName != null) {
          oprot.writeFieldBegin(BOOK_NAME_FIELD_DESC);
          oprot.writeString(struct.bookName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addBook_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addBook_argsTupleScheme getScheme() {
        return new addBook_argsTupleScheme();
      }
    }

    private static class addBook_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addBook_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addBook_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBookName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBookName()) {
          oprot.writeString(struct.bookName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addBook_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bookName = iprot.readString();
          struct.setBookNameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addBook_result implements org.apache.thrift.TBase<addBook_result, addBook_result._Fields>, java.io.Serializable, Cloneable, Comparable<addBook_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addBook_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addBook_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addBook_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addBook_result.class, metaDataMap);
    }

    public addBook_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addBook_result(addBook_result other) {
    }

    public addBook_result deepCopy() {
      return new addBook_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof addBook_result)
        return this.equals((addBook_result)that);
      return false;
    }

    public boolean equals(addBook_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(addBook_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addBook_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addBook_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addBook_resultStandardScheme getScheme() {
        return new addBook_resultStandardScheme();
      }
    }

    private static class addBook_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addBook_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addBook_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addBook_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addBook_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addBook_resultTupleScheme getScheme() {
        return new addBook_resultTupleScheme();
      }
    }

    private static class addBook_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addBook_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addBook_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addBook_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addChapter_args implements org.apache.thrift.TBase<addChapter_args, addChapter_args._Fields>, java.io.Serializable, Cloneable, Comparable<addChapter_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addChapter_args");

    private static final org.apache.thrift.protocol.TField BOOK_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("bookUid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CHAPTER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("chapterName", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addChapter_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addChapter_argsTupleSchemeFactory();

    public java.lang.String bookUid; // required
    public java.lang.String chapterName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BOOK_UID((short)1, "bookUid"),
      CHAPTER_NAME((short)2, "chapterName");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BOOK_UID
            return BOOK_UID;
          case 2: // CHAPTER_NAME
            return CHAPTER_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BOOK_UID, new org.apache.thrift.meta_data.FieldMetaData("bookUid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CHAPTER_NAME, new org.apache.thrift.meta_data.FieldMetaData("chapterName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addChapter_args.class, metaDataMap);
    }

    public addChapter_args() {
    }

    public addChapter_args(
      java.lang.String bookUid,
      java.lang.String chapterName)
    {
      this();
      this.bookUid = bookUid;
      this.chapterName = chapterName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addChapter_args(addChapter_args other) {
      if (other.isSetBookUid()) {
        this.bookUid = other.bookUid;
      }
      if (other.isSetChapterName()) {
        this.chapterName = other.chapterName;
      }
    }

    public addChapter_args deepCopy() {
      return new addChapter_args(this);
    }

    @Override
    public void clear() {
      this.bookUid = null;
      this.chapterName = null;
    }

    public java.lang.String getBookUid() {
      return this.bookUid;
    }

    public addChapter_args setBookUid(java.lang.String bookUid) {
      this.bookUid = bookUid;
      return this;
    }

    public void unsetBookUid() {
      this.bookUid = null;
    }

    /** Returns true if field bookUid is set (has been assigned a value) and false otherwise */
    public boolean isSetBookUid() {
      return this.bookUid != null;
    }

    public void setBookUidIsSet(boolean value) {
      if (!value) {
        this.bookUid = null;
      }
    }

    public java.lang.String getChapterName() {
      return this.chapterName;
    }

    public addChapter_args setChapterName(java.lang.String chapterName) {
      this.chapterName = chapterName;
      return this;
    }

    public void unsetChapterName() {
      this.chapterName = null;
    }

    /** Returns true if field chapterName is set (has been assigned a value) and false otherwise */
    public boolean isSetChapterName() {
      return this.chapterName != null;
    }

    public void setChapterNameIsSet(boolean value) {
      if (!value) {
        this.chapterName = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case BOOK_UID:
        if (value == null) {
          unsetBookUid();
        } else {
          setBookUid((java.lang.String)value);
        }
        break;

      case CHAPTER_NAME:
        if (value == null) {
          unsetChapterName();
        } else {
          setChapterName((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BOOK_UID:
        return getBookUid();

      case CHAPTER_NAME:
        return getChapterName();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BOOK_UID:
        return isSetBookUid();
      case CHAPTER_NAME:
        return isSetChapterName();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof addChapter_args)
        return this.equals((addChapter_args)that);
      return false;
    }

    public boolean equals(addChapter_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bookUid = true && this.isSetBookUid();
      boolean that_present_bookUid = true && that.isSetBookUid();
      if (this_present_bookUid || that_present_bookUid) {
        if (!(this_present_bookUid && that_present_bookUid))
          return false;
        if (!this.bookUid.equals(that.bookUid))
          return false;
      }

      boolean this_present_chapterName = true && this.isSetChapterName();
      boolean that_present_chapterName = true && that.isSetChapterName();
      if (this_present_chapterName || that_present_chapterName) {
        if (!(this_present_chapterName && that_present_chapterName))
          return false;
        if (!this.chapterName.equals(that.chapterName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBookUid()) ? 131071 : 524287);
      if (isSetBookUid())
        hashCode = hashCode * 8191 + bookUid.hashCode();

      hashCode = hashCode * 8191 + ((isSetChapterName()) ? 131071 : 524287);
      if (isSetChapterName())
        hashCode = hashCode * 8191 + chapterName.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addChapter_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBookUid()).compareTo(other.isSetBookUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBookUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bookUid, other.bookUid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetChapterName()).compareTo(other.isSetChapterName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChapterName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chapterName, other.chapterName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addChapter_args(");
      boolean first = true;

      sb.append("bookUid:");
      if (this.bookUid == null) {
        sb.append("null");
      } else {
        sb.append(this.bookUid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("chapterName:");
      if (this.chapterName == null) {
        sb.append("null");
      } else {
        sb.append(this.chapterName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addChapter_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addChapter_argsStandardScheme getScheme() {
        return new addChapter_argsStandardScheme();
      }
    }

    private static class addChapter_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addChapter_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addChapter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BOOK_UID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bookUid = iprot.readString();
                struct.setBookUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CHAPTER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.chapterName = iprot.readString();
                struct.setChapterNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addChapter_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bookUid != null) {
          oprot.writeFieldBegin(BOOK_UID_FIELD_DESC);
          oprot.writeString(struct.bookUid);
          oprot.writeFieldEnd();
        }
        if (struct.chapterName != null) {
          oprot.writeFieldBegin(CHAPTER_NAME_FIELD_DESC);
          oprot.writeString(struct.chapterName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addChapter_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addChapter_argsTupleScheme getScheme() {
        return new addChapter_argsTupleScheme();
      }
    }

    private static class addChapter_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addChapter_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addChapter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBookUid()) {
          optionals.set(0);
        }
        if (struct.isSetChapterName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBookUid()) {
          oprot.writeString(struct.bookUid);
        }
        if (struct.isSetChapterName()) {
          oprot.writeString(struct.chapterName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addChapter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.bookUid = iprot.readString();
          struct.setBookUidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.chapterName = iprot.readString();
          struct.setChapterNameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addChapter_result implements org.apache.thrift.TBase<addChapter_result, addChapter_result._Fields>, java.io.Serializable, Cloneable, Comparable<addChapter_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addChapter_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addChapter_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addChapter_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addChapter_result.class, metaDataMap);
    }

    public addChapter_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addChapter_result(addChapter_result other) {
    }

    public addChapter_result deepCopy() {
      return new addChapter_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof addChapter_result)
        return this.equals((addChapter_result)that);
      return false;
    }

    public boolean equals(addChapter_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(addChapter_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addChapter_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addChapter_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addChapter_resultStandardScheme getScheme() {
        return new addChapter_resultStandardScheme();
      }
    }

    private static class addChapter_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addChapter_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addChapter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addChapter_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addChapter_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addChapter_resultTupleScheme getScheme() {
        return new addChapter_resultTupleScheme();
      }
    }

    private static class addChapter_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addChapter_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addChapter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addChapter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class subscribeForBookList_args implements org.apache.thrift.TBase<subscribeForBookList_args, subscribeForBookList_args._Fields>, java.io.Serializable, Cloneable, Comparable<subscribeForBookList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("subscribeForBookList_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new subscribeForBookList_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new subscribeForBookList_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(subscribeForBookList_args.class, metaDataMap);
    }

    public subscribeForBookList_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public subscribeForBookList_args(subscribeForBookList_args other) {
    }

    public subscribeForBookList_args deepCopy() {
      return new subscribeForBookList_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof subscribeForBookList_args)
        return this.equals((subscribeForBookList_args)that);
      return false;
    }

    public boolean equals(subscribeForBookList_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(subscribeForBookList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("subscribeForBookList_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class subscribeForBookList_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public subscribeForBookList_argsStandardScheme getScheme() {
        return new subscribeForBookList_argsStandardScheme();
      }
    }

    private static class subscribeForBookList_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<subscribeForBookList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, subscribeForBookList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, subscribeForBookList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class subscribeForBookList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public subscribeForBookList_argsTupleScheme getScheme() {
        return new subscribeForBookList_argsTupleScheme();
      }
    }

    private static class subscribeForBookList_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<subscribeForBookList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, subscribeForBookList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, subscribeForBookList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class subscribeForBookList_result implements org.apache.thrift.TBase<subscribeForBookList_result, subscribeForBookList_result._Fields>, java.io.Serializable, Cloneable, Comparable<subscribeForBookList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("subscribeForBookList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new subscribeForBookList_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new subscribeForBookList_resultTupleSchemeFactory();

    public java.util.List<Callback> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Callback.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(subscribeForBookList_result.class, metaDataMap);
    }

    public subscribeForBookList_result() {
    }

    public subscribeForBookList_result(
      java.util.List<Callback> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public subscribeForBookList_result(subscribeForBookList_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Callback> __this__success = new java.util.ArrayList<Callback>(other.success.size());
        for (Callback other_element : other.success) {
          __this__success.add(new Callback(other_element));
        }
        this.success = __this__success;
      }
    }

    public subscribeForBookList_result deepCopy() {
      return new subscribeForBookList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Callback> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Callback elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Callback>();
      }
      this.success.add(elem);
    }

    public java.util.List<Callback> getSuccess() {
      return this.success;
    }

    public subscribeForBookList_result setSuccess(java.util.List<Callback> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Callback>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof subscribeForBookList_result)
        return this.equals((subscribeForBookList_result)that);
      return false;
    }

    public boolean equals(subscribeForBookList_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(subscribeForBookList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("subscribeForBookList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class subscribeForBookList_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public subscribeForBookList_resultStandardScheme getScheme() {
        return new subscribeForBookList_resultStandardScheme();
      }
    }

    private static class subscribeForBookList_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<subscribeForBookList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, subscribeForBookList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Callback>(_list8.size);
                  Callback _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new Callback();
                    _elem9.read(iprot);
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, subscribeForBookList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Callback _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class subscribeForBookList_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public subscribeForBookList_resultTupleScheme getScheme() {
        return new subscribeForBookList_resultTupleScheme();
      }
    }

    private static class subscribeForBookList_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<subscribeForBookList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, subscribeForBookList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Callback _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, subscribeForBookList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Callback>(_list13.size);
            Callback _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new Callback();
              _elem14.read(iprot);
              struct.success.add(_elem14);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class subscribeForBookChapters_args implements org.apache.thrift.TBase<subscribeForBookChapters_args, subscribeForBookChapters_args._Fields>, java.io.Serializable, Cloneable, Comparable<subscribeForBookChapters_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("subscribeForBookChapters_args");

    private static final org.apache.thrift.protocol.TField BOOK_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("bookUid", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new subscribeForBookChapters_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new subscribeForBookChapters_argsTupleSchemeFactory();

    public java.lang.String bookUid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BOOK_UID((short)1, "bookUid");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BOOK_UID
            return BOOK_UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BOOK_UID, new org.apache.thrift.meta_data.FieldMetaData("bookUid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(subscribeForBookChapters_args.class, metaDataMap);
    }

    public subscribeForBookChapters_args() {
    }

    public subscribeForBookChapters_args(
      java.lang.String bookUid)
    {
      this();
      this.bookUid = bookUid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public subscribeForBookChapters_args(subscribeForBookChapters_args other) {
      if (other.isSetBookUid()) {
        this.bookUid = other.bookUid;
      }
    }

    public subscribeForBookChapters_args deepCopy() {
      return new subscribeForBookChapters_args(this);
    }

    @Override
    public void clear() {
      this.bookUid = null;
    }

    public java.lang.String getBookUid() {
      return this.bookUid;
    }

    public subscribeForBookChapters_args setBookUid(java.lang.String bookUid) {
      this.bookUid = bookUid;
      return this;
    }

    public void unsetBookUid() {
      this.bookUid = null;
    }

    /** Returns true if field bookUid is set (has been assigned a value) and false otherwise */
    public boolean isSetBookUid() {
      return this.bookUid != null;
    }

    public void setBookUidIsSet(boolean value) {
      if (!value) {
        this.bookUid = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case BOOK_UID:
        if (value == null) {
          unsetBookUid();
        } else {
          setBookUid((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BOOK_UID:
        return getBookUid();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BOOK_UID:
        return isSetBookUid();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof subscribeForBookChapters_args)
        return this.equals((subscribeForBookChapters_args)that);
      return false;
    }

    public boolean equals(subscribeForBookChapters_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bookUid = true && this.isSetBookUid();
      boolean that_present_bookUid = true && that.isSetBookUid();
      if (this_present_bookUid || that_present_bookUid) {
        if (!(this_present_bookUid && that_present_bookUid))
          return false;
        if (!this.bookUid.equals(that.bookUid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBookUid()) ? 131071 : 524287);
      if (isSetBookUid())
        hashCode = hashCode * 8191 + bookUid.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(subscribeForBookChapters_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBookUid()).compareTo(other.isSetBookUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBookUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bookUid, other.bookUid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("subscribeForBookChapters_args(");
      boolean first = true;

      sb.append("bookUid:");
      if (this.bookUid == null) {
        sb.append("null");
      } else {
        sb.append(this.bookUid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class subscribeForBookChapters_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public subscribeForBookChapters_argsStandardScheme getScheme() {
        return new subscribeForBookChapters_argsStandardScheme();
      }
    }

    private static class subscribeForBookChapters_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<subscribeForBookChapters_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, subscribeForBookChapters_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BOOK_UID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bookUid = iprot.readString();
                struct.setBookUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, subscribeForBookChapters_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bookUid != null) {
          oprot.writeFieldBegin(BOOK_UID_FIELD_DESC);
          oprot.writeString(struct.bookUid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class subscribeForBookChapters_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public subscribeForBookChapters_argsTupleScheme getScheme() {
        return new subscribeForBookChapters_argsTupleScheme();
      }
    }

    private static class subscribeForBookChapters_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<subscribeForBookChapters_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, subscribeForBookChapters_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBookUid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBookUid()) {
          oprot.writeString(struct.bookUid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, subscribeForBookChapters_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bookUid = iprot.readString();
          struct.setBookUidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class subscribeForBookChapters_result implements org.apache.thrift.TBase<subscribeForBookChapters_result, subscribeForBookChapters_result._Fields>, java.io.Serializable, Cloneable, Comparable<subscribeForBookChapters_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("subscribeForBookChapters_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new subscribeForBookChapters_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new subscribeForBookChapters_resultTupleSchemeFactory();

    public java.util.List<Callback> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Callback.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(subscribeForBookChapters_result.class, metaDataMap);
    }

    public subscribeForBookChapters_result() {
    }

    public subscribeForBookChapters_result(
      java.util.List<Callback> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public subscribeForBookChapters_result(subscribeForBookChapters_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Callback> __this__success = new java.util.ArrayList<Callback>(other.success.size());
        for (Callback other_element : other.success) {
          __this__success.add(new Callback(other_element));
        }
        this.success = __this__success;
      }
    }

    public subscribeForBookChapters_result deepCopy() {
      return new subscribeForBookChapters_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Callback> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Callback elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Callback>();
      }
      this.success.add(elem);
    }

    public java.util.List<Callback> getSuccess() {
      return this.success;
    }

    public subscribeForBookChapters_result setSuccess(java.util.List<Callback> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Callback>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof subscribeForBookChapters_result)
        return this.equals((subscribeForBookChapters_result)that);
      return false;
    }

    public boolean equals(subscribeForBookChapters_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(subscribeForBookChapters_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("subscribeForBookChapters_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class subscribeForBookChapters_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public subscribeForBookChapters_resultStandardScheme getScheme() {
        return new subscribeForBookChapters_resultStandardScheme();
      }
    }

    private static class subscribeForBookChapters_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<subscribeForBookChapters_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, subscribeForBookChapters_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Callback>(_list16.size);
                  Callback _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = new Callback();
                    _elem17.read(iprot);
                    struct.success.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, subscribeForBookChapters_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Callback _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class subscribeForBookChapters_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public subscribeForBookChapters_resultTupleScheme getScheme() {
        return new subscribeForBookChapters_resultTupleScheme();
      }
    }

    private static class subscribeForBookChapters_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<subscribeForBookChapters_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, subscribeForBookChapters_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Callback _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, subscribeForBookChapters_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Callback>(_list21.size);
            Callback _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = new Callback();
              _elem22.read(iprot);
              struct.success.add(_elem22);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class subscribeForChapter_args implements org.apache.thrift.TBase<subscribeForChapter_args, subscribeForChapter_args._Fields>, java.io.Serializable, Cloneable, Comparable<subscribeForChapter_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("subscribeForChapter_args");

    private static final org.apache.thrift.protocol.TField BOOK_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("bookUid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CHAPTER_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("chapterUid", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new subscribeForChapter_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new subscribeForChapter_argsTupleSchemeFactory();

    public java.lang.String bookUid; // required
    public java.lang.String chapterUid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BOOK_UID((short)1, "bookUid"),
      CHAPTER_UID((short)2, "chapterUid");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BOOK_UID
            return BOOK_UID;
          case 2: // CHAPTER_UID
            return CHAPTER_UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BOOK_UID, new org.apache.thrift.meta_data.FieldMetaData("bookUid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CHAPTER_UID, new org.apache.thrift.meta_data.FieldMetaData("chapterUid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(subscribeForChapter_args.class, metaDataMap);
    }

    public subscribeForChapter_args() {
    }

    public subscribeForChapter_args(
      java.lang.String bookUid,
      java.lang.String chapterUid)
    {
      this();
      this.bookUid = bookUid;
      this.chapterUid = chapterUid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public subscribeForChapter_args(subscribeForChapter_args other) {
      if (other.isSetBookUid()) {
        this.bookUid = other.bookUid;
      }
      if (other.isSetChapterUid()) {
        this.chapterUid = other.chapterUid;
      }
    }

    public subscribeForChapter_args deepCopy() {
      return new subscribeForChapter_args(this);
    }

    @Override
    public void clear() {
      this.bookUid = null;
      this.chapterUid = null;
    }

    public java.lang.String getBookUid() {
      return this.bookUid;
    }

    public subscribeForChapter_args setBookUid(java.lang.String bookUid) {
      this.bookUid = bookUid;
      return this;
    }

    public void unsetBookUid() {
      this.bookUid = null;
    }

    /** Returns true if field bookUid is set (has been assigned a value) and false otherwise */
    public boolean isSetBookUid() {
      return this.bookUid != null;
    }

    public void setBookUidIsSet(boolean value) {
      if (!value) {
        this.bookUid = null;
      }
    }

    public java.lang.String getChapterUid() {
      return this.chapterUid;
    }

    public subscribeForChapter_args setChapterUid(java.lang.String chapterUid) {
      this.chapterUid = chapterUid;
      return this;
    }

    public void unsetChapterUid() {
      this.chapterUid = null;
    }

    /** Returns true if field chapterUid is set (has been assigned a value) and false otherwise */
    public boolean isSetChapterUid() {
      return this.chapterUid != null;
    }

    public void setChapterUidIsSet(boolean value) {
      if (!value) {
        this.chapterUid = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case BOOK_UID:
        if (value == null) {
          unsetBookUid();
        } else {
          setBookUid((java.lang.String)value);
        }
        break;

      case CHAPTER_UID:
        if (value == null) {
          unsetChapterUid();
        } else {
          setChapterUid((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BOOK_UID:
        return getBookUid();

      case CHAPTER_UID:
        return getChapterUid();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BOOK_UID:
        return isSetBookUid();
      case CHAPTER_UID:
        return isSetChapterUid();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof subscribeForChapter_args)
        return this.equals((subscribeForChapter_args)that);
      return false;
    }

    public boolean equals(subscribeForChapter_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bookUid = true && this.isSetBookUid();
      boolean that_present_bookUid = true && that.isSetBookUid();
      if (this_present_bookUid || that_present_bookUid) {
        if (!(this_present_bookUid && that_present_bookUid))
          return false;
        if (!this.bookUid.equals(that.bookUid))
          return false;
      }

      boolean this_present_chapterUid = true && this.isSetChapterUid();
      boolean that_present_chapterUid = true && that.isSetChapterUid();
      if (this_present_chapterUid || that_present_chapterUid) {
        if (!(this_present_chapterUid && that_present_chapterUid))
          return false;
        if (!this.chapterUid.equals(that.chapterUid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBookUid()) ? 131071 : 524287);
      if (isSetBookUid())
        hashCode = hashCode * 8191 + bookUid.hashCode();

      hashCode = hashCode * 8191 + ((isSetChapterUid()) ? 131071 : 524287);
      if (isSetChapterUid())
        hashCode = hashCode * 8191 + chapterUid.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(subscribeForChapter_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBookUid()).compareTo(other.isSetBookUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBookUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bookUid, other.bookUid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetChapterUid()).compareTo(other.isSetChapterUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChapterUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chapterUid, other.chapterUid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("subscribeForChapter_args(");
      boolean first = true;

      sb.append("bookUid:");
      if (this.bookUid == null) {
        sb.append("null");
      } else {
        sb.append(this.bookUid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("chapterUid:");
      if (this.chapterUid == null) {
        sb.append("null");
      } else {
        sb.append(this.chapterUid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class subscribeForChapter_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public subscribeForChapter_argsStandardScheme getScheme() {
        return new subscribeForChapter_argsStandardScheme();
      }
    }

    private static class subscribeForChapter_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<subscribeForChapter_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, subscribeForChapter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BOOK_UID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bookUid = iprot.readString();
                struct.setBookUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CHAPTER_UID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.chapterUid = iprot.readString();
                struct.setChapterUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, subscribeForChapter_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bookUid != null) {
          oprot.writeFieldBegin(BOOK_UID_FIELD_DESC);
          oprot.writeString(struct.bookUid);
          oprot.writeFieldEnd();
        }
        if (struct.chapterUid != null) {
          oprot.writeFieldBegin(CHAPTER_UID_FIELD_DESC);
          oprot.writeString(struct.chapterUid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class subscribeForChapter_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public subscribeForChapter_argsTupleScheme getScheme() {
        return new subscribeForChapter_argsTupleScheme();
      }
    }

    private static class subscribeForChapter_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<subscribeForChapter_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, subscribeForChapter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBookUid()) {
          optionals.set(0);
        }
        if (struct.isSetChapterUid()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBookUid()) {
          oprot.writeString(struct.bookUid);
        }
        if (struct.isSetChapterUid()) {
          oprot.writeString(struct.chapterUid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, subscribeForChapter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.bookUid = iprot.readString();
          struct.setBookUidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.chapterUid = iprot.readString();
          struct.setChapterUidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class subscribeForChapter_result implements org.apache.thrift.TBase<subscribeForChapter_result, subscribeForChapter_result._Fields>, java.io.Serializable, Cloneable, Comparable<subscribeForChapter_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("subscribeForChapter_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new subscribeForChapter_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new subscribeForChapter_resultTupleSchemeFactory();

    public java.util.List<Callback> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Callback.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(subscribeForChapter_result.class, metaDataMap);
    }

    public subscribeForChapter_result() {
    }

    public subscribeForChapter_result(
      java.util.List<Callback> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public subscribeForChapter_result(subscribeForChapter_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Callback> __this__success = new java.util.ArrayList<Callback>(other.success.size());
        for (Callback other_element : other.success) {
          __this__success.add(new Callback(other_element));
        }
        this.success = __this__success;
      }
    }

    public subscribeForChapter_result deepCopy() {
      return new subscribeForChapter_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Callback> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Callback elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Callback>();
      }
      this.success.add(elem);
    }

    public java.util.List<Callback> getSuccess() {
      return this.success;
    }

    public subscribeForChapter_result setSuccess(java.util.List<Callback> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Callback>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof subscribeForChapter_result)
        return this.equals((subscribeForChapter_result)that);
      return false;
    }

    public boolean equals(subscribeForChapter_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(subscribeForChapter_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("subscribeForChapter_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class subscribeForChapter_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public subscribeForChapter_resultStandardScheme getScheme() {
        return new subscribeForChapter_resultStandardScheme();
      }
    }

    private static class subscribeForChapter_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<subscribeForChapter_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, subscribeForChapter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Callback>(_list24.size);
                  Callback _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = new Callback();
                    _elem25.read(iprot);
                    struct.success.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, subscribeForChapter_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Callback _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class subscribeForChapter_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public subscribeForChapter_resultTupleScheme getScheme() {
        return new subscribeForChapter_resultTupleScheme();
      }
    }

    private static class subscribeForChapter_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<subscribeForChapter_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, subscribeForChapter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Callback _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, subscribeForChapter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Callback>(_list29.size);
            Callback _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = new Callback();
              _elem30.read(iprot);
              struct.success.add(_elem30);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
